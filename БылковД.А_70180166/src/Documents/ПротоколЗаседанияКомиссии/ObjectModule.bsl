&НаСервере
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
    
    Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РекомендацииПоСтудентам") Тогда
        
        // Получаем объект документа-основания
        ДокументОснование = ДанныеЗаполнения.ПолучитьОбъект();
        
        // Заполняем студента
        ЭтотОбъект.Студент = ДокументОснование.Студент;
        
        // Получаем данные студента из справочника
        ДанныеСтудента = ПолучитьДанныеСтудента(ДокументОснование.Студент);
        
        // Заполняем семестр
        Если ДанныеСтудента.Свойство("Семестр") Тогда
            ЭтотОбъект.Семестр = ДанныеСтудента.Семестр;
        КонецЕсли;
        
        // Заполняем группу
        Если ДанныеСтудента.Свойство("ГруппаСсылка") Тогда
            ЭтотОбъект.Группа = ДанныеСтудента.ГруппаСсылка;
        КонецЕсли;
             
        // Получаем количество возникших задолженностей из ведомостей
        КоличествоВозникших = ПолучитьКоличествоВозникшихЗадолженностей(ДокументОснование.Студент);
        ЭтотОбъект.КоличествоВозникшихЗадолженностей = КоличествоВозникших;
        
        // Получаем количество ликвидированных задолженностей (со статусом "Закрытая")
        КоличествоЛиквидированных = ПолучитьКоличествоЛиквидированныхЗадолженностей(ДокументОснование.Студент);
        ЭтотОбъект.КоличествоЛиквидированныхЗадолженностей = КоличествоЛиквидированных;
        
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтудента(СсылкаНаСтудента) Экспорт
    Результат = Новый Структура;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.Семестр КАК Семестр,
    |    Студенты.Родитель КАК РодительСправочника,
    |    Студенты.Родитель.Наименование КАК НаименованиеРодителя,
    |    Студенты.ФормаОбучения КАК ФормаОбучения,
    |    Студенты.Наименование КАК Наименование
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &СсылкаНаСтудента"; 

    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();    

    Если Выборка.Следующий() Тогда
        // Заполняем семестр
        Если ЗначениеЗаполнено(Выборка.Семестр) Тогда
            Результат.Вставить("Семестр", Выборка.Семестр);
        КонецЕсли;
        
        // Заполняем группу
        Если ЗначениеЗаполнено(Выборка.РодительСправочника) Тогда
            Группа = НайтиГруппуПоНаименованию(Выборка.НаименованиеРодителя);
            Если Не ЗначениеЗаполнено(Группа) Тогда
                Группа = НайтиГруппуПоЧастичномуСовпадению(Выборка.НаименованиеРодителя);
            КонецЕсли;
            
            Результат.Вставить("ГруппаСсылка", Группа);
            Результат.Вставить("ГруппаНаименование", Выборка.НаименованиеРодителя);
        КонецЕсли;
        
        Результат.Вставить("НаименованиеСтудента", Выборка.Наименование);
        Результат.Вставить("ФормаОбучения", Выборка.ФормаОбучения);
    КонецЕсли;
    
    Возврат Результат;
КонецФункции

&НаСервере
Функция НайтиГруппуПоНаименованию(НаименованиеГруппы)
    // Поиск группы по точному совпадению наименования
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Группы.Ссылка КАК Ссылка
    |ИЗ
    |    Справочник.Группы КАК Группы
    |ГДЕ
    |    ВЕРХ(Группы.Наименование) = ВЕРХ(&Наименование)";
    
    Запрос.УстановитьПараметр("Наименование", НаименованиеГруппы);
    
    Попытка
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если Выборка.Следующий() Тогда
            Возврат Выборка.Ссылка;
        КонецЕсли;
    Исключение
        // Логируем ошибку
    КонецПопытки;
    
    Возврат Неопределено;
КонецФункции

&НаСервере
Функция НайтиГруппуПоЧастичномуСовпадению(НаименованиеГруппы)
    // Поиск группы по частичному совпадению наименования
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Группы.Ссылка КАК Ссылка
    |ИЗ
    |    Справочник.Группы КАК Группы
    |ГДЕ
    |    Группы.Наименование ПОДОБНО &Наименование";
    
    Запрос.УстановитьПараметр("Наименование", "%"+НаименованиеГруппы+"%");
    
    Попытка
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если Выборка.Следующий() Тогда
            Возврат Выборка.Ссылка;
        КонецЕсли;
    Исключение
        // Логируем ошибку
    КонецПопытки;
    
    Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьКоличествоВозникшихЗадолженностей(Студент)
    
    КоличествоЗадолженностей = 0;
    
    // Считаем все ведомости о задолженностях (обычные)
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    КОЛИЧЕСТВО(Ведомость.Ссылка) КАК Количество
    |ИЗ
    |    Документ.ВедомостьОСистемеАкадемическихЗадолженностей КАК Ведомость
    |ГДЕ
    |    Ведомость.Студент = &Студент";
    
    Запрос.УстановитьПараметр("Студент", Студент);
    
    Попытка
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        Если Выборка.Следующий() Тогда
            КоличествоЗадолженностей = Выборка.Количество;
        КонецЕсли;
    Исключение
        // Логирование ошибки
        ЗаписьЖурналаРегистрации("Ошибка подсчета ведомостей", УровеньЖурналаРегистрации.Ошибка);
    КонецПопытки;
    
    // Добавляем ведомости для студентов с ИОМ
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    КОЛИЧЕСТВО(ВедомостьИОМ.Ссылка) КАК Количество
    |ИЗ
    |    Документ.ВедомостьОСистемеАкадемическихЗадолженностейДляСтудентовсИОМ КАК ВедомостьИОМ
    |ГДЕ
    |    ВедомостьИОМ.Студент = &Студент";
    
    Запрос.УстановитьПараметр("Студент", Студент);
    
    Попытка
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        Если Выборка.Следующий() Тогда
            КоличествоЗадолженностей = КоличествоЗадолженностей + Выборка.Количество;
        КонецЕсли;
    Исключение
        // Логирование ошибки
        ЗаписьЖурналаРегистрации("Ошибка подсчета ведомостей ИОМ", УровеньЖурналаРегистрации.Ошибка);
    КонецПопытки;
    
    Возврат ?(КоличествоЗадолженностей <> Неопределено, КоличествоЗадолженностей, 0);
КонецФункции

&НаСервере
Функция ПолучитьКоличествоЛиквидированныхЗадолженностей(Студент)
    
    КоличествоЛиквидированных = 0;
    
    // Считаем закрытые задолженности из обычной ведомости
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    КОЛИЧЕСТВО(Ведомость.Ссылка) КАК Количество
    |ИЗ
    |    Документ.ВедомостьОСистемеАкадемическихЗадолженностей КАК Ведомость
    |ГДЕ
    |    Ведомость.Студент = &Студент
    |    И Ведомость.СтатусАкадемическойЗадолженности = &СтатусЗакрыта";
    
    Запрос.УстановитьПараметр("Студент", Студент);
    Запрос.УстановитьПараметр("СтатусЗакрыта", Перечисления.НаименованиеСтатуса.Закрытая);
    
    Попытка
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        Если Выборка.Следующий() Тогда
            КоличествоЛиквидированных = Выборка.Количество;
        КонецЕсли;
    Исключение
        // Логирование ошибки
        ЗаписьЖурналаРегистрации("Ошибка подсчета закрытых ведомостей", УровеньЖурналаРегистрации.Ошибка);
    КонецПопытки;
    
    // Добавляем закрытые задолженности из ведомости для студентов с ИОМ
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    КОЛИЧЕСТВО(ВедомостьИОМ.Ссылка) КАК Количество
    |ИЗ
    |    Документ.ВедомостьОСистемеАкадемическихЗадолженностейДляСтудентовсИОМ КАК ВедомостьИОМ
    |ГДЕ
    |    ВедомостьИОМ.Студент = &Студент
    |    И ВедомостьИОМ.СтатусАкадемическойЗадолженности = &СтатусЗакрыта";
    
    Запрос.УстановитьПараметр("Студент", Студент);
    Запрос.УстановитьПараметр("СтатусЗакрыта", Перечисления.НаименованиеСтатуса.Закрытая);
    
    Попытка
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        Если Выборка.Следующий() Тогда
            КоличествоЛиквидированных = КоличествоЛиквидированных + Выборка.Количество;
        КонецЕсли;
    Исключение
        // Логирование ошибки
        ЗаписьЖурналаРегистрации("Ошибка подсчета закрытых ведомостей ИОМ", УровеньЖурналаРегистрации.Ошибка);
    КонецПопытки;
    
    Возврат ?(КоличествоЛиквидированных <> Неопределено, КоличествоЛиквидированных, 0);
КонецФункции

Процедура ОбработкаПроведения(Отказ, Режим)

	
	// регистр ДинамикаЛиквидацииЗадолженностей 
	Движения.ДинамикаЛиквидацииЗадолженностей.Записывать = Истина;
	Движение = Движения.ДинамикаЛиквидацииЗадолженностей.Добавить();
	Движение.Период = Дата;
	Движение.Студент = Студент;
	Движение.Группа = Группа;
	Движение.Семестр = Семестр;
	Движение.КоличествоВозникшихЗадолженностей = КоличествоВозникшихЗадолженностей;
	Движение.КоличествоЛиквидированныхЗадолженностей = КоличествоЛиквидированныхЗадолженностей;

	// регистр УспешныеПересдачи 
	Движения.УспешныеПересдачи.Записывать = Истина;
	Движение = Движения.УспешныеПересдачи.Добавить();
	Движение.Период = Дата;
	Движение.Студент = Студент;
	Движение.Группа = Группа;
	Движение.КоличествоУспешныхПересдач = КоличествоЛиквидированныхЗадолженностей;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	КонецПроцедуры
