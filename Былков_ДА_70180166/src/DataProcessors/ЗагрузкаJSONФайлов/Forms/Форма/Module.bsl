//Загрузка JSON-файла
&НаКлиенте
Процедура ЗагрузкаJSONНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок = "Укажите JSON файл для загрузки";
	ДиалогВыбора.Фильтр = "JSON файлы (*.json)|*.json|Все файлы (*.*)|*.*";
	
	Если ДиалогВыбора.Выбрать() Тогда
		ЗагрузкаJSON = ДиалогВыбора.ПолноеИмяФайла;
		Сообщить("Выбран файл: " + ЗагрузкаJSON);
	КонецЕсли;
КонецПроцедуры



  //Заполнение справочника "НаправленияПодготовки"
&НаКлиенте
Процедура ЗагрузитьНаправленияПодготовки(Команда)
	
	Если НЕ ЗначениеЗаполнено(ЗагрузкаJSON) Тогда
		Сообщить("Необходимо выбрать JSON файл для загрузки!");
		Возврат;
	КонецЕсли;
	
	Попытка
		ФайлДляРаботы = Новый ТекстовыйДокумент;
		ФайлДляРаботы.Прочитать(ЗагрузкаJSON, КодировкаТекста.UTF8);
		
		НастрИнфо = Новый ЧтениеJSON;
		НастрИнфо.УстановитьСтроку(ФайлДляРаботы.ПолучитьТекст());
		ДанныеJSON = ПрочитатьJSON(НастрИнфо);
		
		РезультатЗагрузки = ЗагрузитьНаправленияПодготовкиНаСервере(ДанныеJSON);
		
		Если РезультатЗагрузки.Успех Тогда
			Сообщить("Загрузка завершена успешно! Обработано записей: " + РезультатЗагрузки.КоличествоОбработанных + 
					 ", найдено уникальных направлений: " + РезультатЗагрузки.КоличествоУникальных);
		Иначе
			Сообщить("Ошибка при загрузке: " + РезультатЗагрузки.ТекстОшибки);
		КонецЕсли;
		
	Исключение
		Сообщить("Ошибка при чтении файла: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУровеньОбразованияИзСтроки(СтрокаУровня)
	
	СтрокаУровня = ВРег(СокрЛП(СтрокаУровня));
	
	// Сопоставляем строковые значения с элементами перечисления
	Если СтрокаУровня = "БАКАЛАВР" ИЛИ СтрокаУровня = "БАКАЛАВРИАТ" Тогда
		Возврат Перечисления.УровеньОбразования.Бакалавр;
		
	ИначеЕсли СтрокаУровня = "МАГИСТР" ИЛИ СтрокаУровня = "МАГИСТРАТУРА" Тогда
		Возврат Перечисления.УровеньОбразования.Магистр;
		
	ИначеЕсли СтрокаУровня = "СПЕЦИАЛИСТ" ИЛИ СтрокаУровня = "СПЕЦИАЛИТЕТ" Тогда
		Возврат Перечисления.УровеньОбразования.Специалист;
		
	ИначеЕсли СтрокаУровня = "БАЗОВАЯ" ИЛИ СтрокаУровня = "БАЗОВЫЙ" ИЛИ СтрНайти(СтрокаУровня, "БАЗОВ") > 0 Тогда
		Возврат Перечисления.УровеньОбразования.СПОБазовый;
		
	ИначеЕсли СтрокаУровня = "Программист" > 0 Тогда
		Возврат Перечисления.УровеньОбразования.Программист;
		
	ИначеЕсли СтрНайти(СтрокаУровня, "СПО") > 0 Тогда
		Возврат Перечисления.УровеньОбразования.СПОБазовый;
		
	ИначеЕсли СтрНайти(СтрокаУровня, "АСПИРАНТ") > 0 ИЛИ СтрНайти(СтрокаУровня, "ПОСЛЕВУЗ") > 0 Тогда
		Возврат Перечисления.УровеньОбразования.Аспирантура;
		
	Иначе
		// Если не удалось определить уровень, возвращаем пустую ссылку
		Возврат Перечисления.УровеньОбразования.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗагрузитьНаправленияПодготовкиНаСервере(СтруктураJSON)
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("КоличествоОбработанных", 0);
	Результат.Вставить("КоличествоУникальных", 0);
	
	Попытка
		// Проверяем наличие массива groups в JSON
		Если НЕ СтруктураJSON.Свойство("groups") Тогда
			Результат.ТекстОшибки = "В JSON файле не найден массив 'groups'";
			Возврат Результат;
		КонецЕсли;
		
		МассивГрупп = СтруктураJSON.groups;
		КоличествоОбработанных = 0;
		УникальныеНаправления = Новый Соответствие; // Для отслеживания уникальных направлений
		
		Для каждого Группа Из МассивГрупп Цикл
			
			// Проверяем наличие данных группы и студентов
			Если НЕ Группа.Свойство("ДанныеГруппы") ИЛИ НЕ Группа.ДанныеГруппы.Свойство("students") Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСтудентов = Группа.ДанныеГруппы.students;
			
			Для каждого Студент Из МассивСтудентов Цикл
				
				// Проверяем наличие поля speciality у студента
				Если НЕ Студент.Свойство("speciality") ИЛИ НЕ ЗначениеЗаполнено(Студент.speciality) Тогда
					Продолжить;
				КонецЕсли;
				
				СпециальностьСтрока = Студент.speciality;
				
				// Парсим строку специальности для извлечения данных
				ДанныеНаправления = ПарсерСтрокиСпециальности(СпециальностьСтрока);
				
				Если НЕ ДанныеНаправления.Успех Тогда
					Продолжить; // Пропускаем некорректные записи
				КонецЕсли;
				
				// Создаем ключ для проверки уникальности
				КлючНаправления = ДанныеНаправления.КодНаправленияПодготовки + "|" + ДанныеНаправления.УровеньОбразования;
				
				// Если такое направление уже обработано, пропускаем
				Если УникальныеНаправления.Получить(КлючНаправления) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// Отмечаем направление как обработанное
				УникальныеНаправления.Вставить(КлючНаправления, Истина);
				
				// Ищем существующий элемент справочника
				НапрПодг = Справочники.НаправленияПодготовки.НайтиПоРеквизиту("КодНаправленияПодготовки", ДанныеНаправления.КодНаправленияПодготовки);
				
				Если НЕ ЗначениеЗаполнено(НапрПодг) Тогда
					// Если не найден по коду, ищем по наименованию
					НапрПодг = Справочники.НаправленияПодготовки.НайтиПоНаименованию(ДанныеНаправления.Наименование);
				КонецЕсли;
				
				// Получаем значение перечисления для уровня образования
				УровеньОбразованияПеречисление = ПолучитьУровеньОбразованияИзСтроки(ДанныеНаправления.УровеньОбразования);
				
				Если ЗначениеЗаполнено(НапрПодг) Тогда
					// Обновляем существующий элемент
					НапрПодгОбъект = НапрПодг.ПолучитьОбъект();
					НапрПодгОбъект.Наименование = ДанныеНаправления.Наименование;
					НапрПодгОбъект.КодНаправленияПодготовки = ДанныеНаправления.КодНаправленияПодготовки;
					Если ЗначениеЗаполнено(УровеньОбразованияПеречисление) Тогда
						НапрПодгОбъект.УровеньОбразования = УровеньОбразованияПеречисление;
					КонецЕсли;
					
					НапрПодгОбъект.Записать();
					
				Иначе
					// Создаем новый элемент справочника
					НапрПодгЭлемент = Справочники.НаправленияПодготовки.СоздатьЭлемент();
					НапрПодгЭлемент.Наименование = ДанныеНаправления.Наименование;
					НапрПодгЭлемент.КодНаправленияПодготовки = ДанныеНаправления.КодНаправленияПодготовки;
					Если ЗначениеЗаполнено(УровеньОбразованияПеречисление) Тогда
						НапрПодгЭлемент.УровеньОбразования = УровеньОбразованияПеречисление;
					КонецЕсли;
					
					НапрПодгЭлемент.Записать();
				КонецЕсли;
				
				КоличествоОбработанных = КоличествоОбработанных + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Результат.Успех = Истина;
		Результат.КоличествоОбработанных = КоличествоОбработанных;
		Результат.КоличествоУникальных = УникальныеНаправления.Количество();
		
	Исключение
		Результат.ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции



 //Заполнение справочника "ПрофилиПодготовкиСтудентов"
&НаКлиенте
Процедура ЗагрузитьПрофилиПодготовкиСтудентов(Команда)
    
    Если НЕ ЗначениеЗаполнено(ЗагрузкаJSON) Тогда
        Сообщить("Необходимо выбрать JSON файл для загрузки!");
        Возврат;
    КонецЕсли;
    
    Попытка
        ФайлДляРаботы = Новый ТекстовыйДокумент;
        ФайлДляРаботы.Прочитать(ЗагрузкаJSON, КодировкаТекста.UTF8);
        
        НастрИнфо = Новый ЧтениеJSON;
        НастрИнфо.УстановитьСтроку(ФайлДляРаботы.ПолучитьТекст());
        ДанныеJSON = ПрочитатьJSON(НастрИнфо);
        
        РезультатЗагрузки = ЗагрузитьПрофилиПодготовкиНаСервере(ДанныеJSON);
        
        Если РезультатЗагрузки.Успех Тогда
            Сообщить("Загрузка завершена успешно! Обработано профилей: " + РезультатЗагрузки.КоличествоОбработанных);
        Иначе
            Сообщить("Ошибка при загрузке: " + РезультатЗагрузки.ТекстОшибки);
        КонецЕсли;
        
    Исключение
        Сообщить("Ошибка при чтении файла: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПрофилиПодготовкиНаСервере(СтруктураJSON)
    
    Результат = Новый Структура;
    Результат.Вставить("Успех", Ложь);
    Результат.Вставить("ТекстОшибки", "");
    Результат.Вставить("КоличествоОбработанных", 0);
    Результат.Вставить("КоличествоУникальных", 0);
    
    Попытка
        // Проверяем наличие массива groups в JSON
        Если НЕ СтруктураJSON.Свойство("groups") Тогда
            Результат.ТекстОшибки = "В JSON файле не найден массив 'groups'";
            Возврат Результат;
        КонецЕсли;
        
        МассивГрупп = СтруктураJSON.groups;
        КоличествоОбработанных = 0;
        УникальныеПрофили = Новый Соответствие; // Для отслеживания уникальных профилей
        
        Для каждого Группа Из МассивГрупп Цикл
            
            // Проверяем наличие данных группы и студентов
            Если НЕ Группа.Свойство("ДанныеГруппы") ИЛИ НЕ Группа.ДанныеГруппы.Свойство("students") Тогда
                Продолжить;
            КонецЕсли;
            
            МассивСтудентов = Группа.ДанныеГруппы.students;
            
            Для каждого Студент Из МассивСтудентов Цикл
                
                // Проверяем наличие поля profile у студента
                Если НЕ Студент.Свойство("profile") ИЛИ НЕ ЗначениеЗаполнено(Студент.profile) Тогда
                    Продолжить;
                КонецЕсли;
                
                ИмяПрофиля = Студент.profile;
                
                // Если такой профиль уже обработан, пропускаем
                Если УникальныеПрофили.Получить(ИмяПрофиля) <> Неопределено Тогда
                    Продолжить;
                КонецЕсли;
                
                // Парсим специальность для получения направления подготовки (если есть)
                НаправлениеПодготовки = Неопределено;
                Если Студент.Свойство("speciality") ИЛИ ЗначениеЗаполнено(Студент.speciality) Тогда
                    СпециальностьСтрока = Студент.speciality;
                    ДанныеНаправления = ПарсерСтрокиСпециальности(СпециальностьСтрока);
                    
                    Если ДанныеНаправления.Успех Тогда
                        // Ищем направление по коду
                        НаправлениеПодготовки = Справочники.НаправленияПодготовки.НайтиПоРеквизиту(
                            "КодНаправленияПодготовки", ДанныеНаправления.КодНаправленияПодготовки);
                        
                        Если НЕ ЗначениеЗаполнено(НаправлениеПодготовки) Тогда
                            // Альтернативный поиск по наименованию
                            НаправлениеПодготовки = Справочники.НаправленияПодготовки.НайтиПоНаименованию(
                                ДанныеНаправления.Наименование);
                        КонецЕсли;
                    КонецЕсли;
                КонецЕсли;
                
                // Создаем новый элемент справочника
                ПрофильЭлемент = Справочники.ПрофилиПодготовкиСтудентов.СоздатьЭлемент();
                ПрофильЭлемент.Наименование = ИмяПрофиля;
                
                Если ЗначениеЗаполнено(НаправлениеПодготовки) Тогда
                    ПрофильЭлемент.НаправлениеПодготовки = НаправлениеПодготовки;
                КонецЕсли;
                
                ПрофильЭлемент.Записать();
                
                // Отмечаем профиль как обработанный
                УникальныеПрофили.Вставить(ИмяПрофиля, Истина);
                КоличествоОбработанных = КоличествоОбработанных + 1;
                
            КонецЦикла;
            
        КонецЦикла;
        
        Результат.Успех = Истина;
        Результат.КоличествоОбработанных = КоличествоОбработанных;
        Результат.КоличествоУникальных = УникальныеПрофили.Количество();
        
    Исключение
        Результат.ТекстОшибки = ОписаниеОшибки();
    КонецПопытки;
    
    Возврат Результат;
    
КонецФункции

&НаСервере
Функция ПарсерСтрокиСпециальности(СтрокаСпециальности)
    
    Результат = Новый Структура;
    Результат.Вставить("Успех", Ложь);
    Результат.Вставить("Наименование", "");
    Результат.Вставить("КодНаправленияПодготовки", "");
    Результат.Вставить("УровеньОбразования", "");
    
    Попытка
        // Пример строки: "Реклама [42.02.01] Базовая"
        // Пример строки: "Психолого-педагогическое образование [44.03.02] Бакалавр"
        
        // Ищем код в квадратных скобках
        ПозицияНачалаКода = СтрНайти(СтрокаСпециальности, "[");
        ПозицияКонцаКода = СтрНайти(СтрокаСпециальности, "]");
        
        Если ПозицияНачалаКода = 0 ИЛИ ПозицияКонцаКода = 0 ИЛИ ПозицияКонцаКода <= ПозицияНачалаКода Тогда
            Возврат Результат; // Некорректный формат
        КонецЕсли;
        
        // Извлекаем код направления
        КодНаправления = Сред(СтрокаСпециальности, ПозицияНачалаКода + 1, ПозицияКонцаКода - ПозицияНачалаКода - 1);
        КодНаправления = СокрЛП(КодНаправления);
        
        // Извлекаем наименование (до квадратных скобок)
        Наименование = Лев(СтрокаСпециальности, ПозицияНачалаКода - 1);
        Наименование = СокрЛП(Наименование);
        
        // Извлекаем уровень образования (после квадратных скобок)
        УровеньОбразования = Сред(СтрокаСпециальности, ПозицияКонцаКода + 1);
        УровеньОбразования = СокрЛП(УровеньОбразования);
        
        // Проверяем заполненность обязательных полей
        Если НЕ ЗначениеЗаполнено(Наименование) ИЛИ НЕ ЗначениеЗаполнено(КодНаправления) Тогда
            Возврат Результат;
        КонецЕсли;
        
        // Заполняем результат
        Результат.Успех = Истина;
        Результат.Наименование = Наименование;
        Результат.КодНаправленияПодготовки = КодНаправления;
        Результат.УровеньОбразования = УровеньОбразования;
        
    Исключение
        // В случае ошибки возвращаем неуспешный результат
    КонецПопытки;
    
    Возврат Результат;
    
КонецФункции



//Заполнение справочника "Группы"
&НаКлиенте
Процедура ЗагрузитьГруппыСтудентов(Команда)
    
    Если НЕ ЗначениеЗаполнено(ЗагрузкаJSON) Тогда
        Сообщить("Необходимо выбрать JSON файл для загрузки!");
        Возврат;
    КонецЕсли;
    
    Попытка
        ФайлДляРаботы = Новый ТекстовыйДокумент;
        ФайлДляРаботы.Прочитать(ЗагрузкаJSON, КодировкаТекста.UTF8);
        
        НастрИнфо = Новый ЧтениеJSON;
        НастрИнфо.УстановитьСтроку(ФайлДляРаботы.ПолучитьТекст());
        ДанныеJSON = ПрочитатьJSON(НастрИнфо);
        
        РезультатЗагрузки = ЗагрузитьГруппыСтудентовНаСервере(ДанныеJSON);
        
        Если РезультатЗагрузки.Успех Тогда
            Сообщить("Загрузка завершена успешно! Обработано групп: " + РезультатЗагрузки.КоличествоОбработанных);
        Иначе
            Сообщить("Ошибка при загрузке: " + РезультатЗагрузки.ТекстОшибки);
        КонецЕсли;
        
    Исключение
        Сообщить("Ошибка при чтении файла: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

&НаСервере
Функция ЗагрузитьГруппыСтудентовНаСервере(ДанныеJSON)
    
    Результат = Новый Структура;
    Результат.Вставить("Успех", Ложь);
    Результат.Вставить("ТекстОшибки", "");
    Результат.Вставить("КоличествоОбработанных", 0);
    
    Попытка
        Если НЕ ДанныеJSON.Свойство("groups") Тогда
            Результат.ТекстОшибки = "В JSON файле не найден массив 'groups'";
            Возврат Результат;
        КонецЕсли;
        
        МассивГрупп = ДанныеJSON.groups;
        КоличествоОбработанных = 0;
        
        Для каждого Группа Из МассивГрупп Цикл
            Попытка
                Если НЕ Группа.Свойство("ДанныеГруппы") Тогда
                    Продолжить;
                КонецЕсли;
                
                ДанныеГруппы = Группа.ДанныеГруппы;
                НаименованиеГруппы = "";
                
                Если ДанныеГруппы.Свойство("groupNum") И ЗначениеЗаполнено(ДанныеГруппы.groupNum) Тогда
                    НаименованиеГруппы = ДанныеГруппы.groupNum;
                КонецЕсли;
                
                Если НЕ ЗначениеЗаполнено(НаименованиеГруппы) Тогда
                    Продолжить;
                КонецЕсли;
                
                НайденнаяГруппа = Справочники.Группы.НайтиПоНаименованию(НаименованиеГруппы);
                НаправлениеПодготовки = Неопределено;
                ФормаОбучения = Неопределено;
                ПрофильПодготовки = Неопределено;
                
                // Обработка направления подготовки из специальности
                Если ДанныеГруппы.Свойство("students") Тогда
                    МассивСтудентов = ДанныеГруппы.students;
                    
                    Для каждого Студент Из МассивСтудентов Цикл
                        // Пытаемся получить направление из специальности
                        Если НЕ ЗначениеЗаполнено(НаправлениеПодготовки) И 
                           Студент.Свойство("speciality") И ЗначениеЗаполнено(Студент.speciality) Тогда
                            СпециальностьСтрока = Студент.speciality;
                            ДанныеНаправления = ПарсерСтрокиСпециальности(СпециальностьСтрока);
                            
                            Если ДанныеНаправления.Успех Тогда
                                НаправлениеПодготовки = Справочники.НаправленияПодготовки.НайтиПоРеквизиту(
                                    "КодНаправленияПодготовки", ДанныеНаправления.КодНаправленияПодготовки);
                                
                                Если НЕ ЗначениеЗаполнено(НаправлениеПодготовки) Тогда
                                    // Альтернативный поиск по наименованию
                                    НаправлениеПодготовки = Справочники.НаправленияПодготовки.НайтиПоНаименованию(
                                        ДанныеНаправления.Наименование);
                                КонецЕсли;
                            КонецЕсли;
                        КонецЕсли;
                        
                        // Получаем форму обучения
                        Если НЕ ЗначениеЗаполнено(ФормаОбучения) И 
                           Студент.Свойство("studyform") И ЗначениеЗаполнено(Студент.studyform) Тогда
                            ФормаОбучения = ПолучитьФормуОбучения(Студент.studyform);
                        КонецЕсли;
                        
                        Если ЗначениеЗаполнено(НаправлениеПодготовки) И ЗначениеЗаполнено(ФормаОбучения) Тогда
                            Прервать;
                        КонецЕсли;
                    КонецЦикла;
                КонецЕсли;
                
                // Дополнительная проверка свойств самой группы
                Если НЕ ЗначениеЗаполнено(ФормаОбучения) И 
                   ДанныеГруппы.Свойство("studyform") И ЗначениеЗаполнено(ДанныеГруппы.studyform) Тогда
                    ФормаОбучения = ПолучитьФормуОбучения(ДанныеГруппы.studyform);
                КонецЕсли;
                
                // Создаем или обновляем группу
                Если ЗначениеЗаполнено(НайденнаяГруппа) Тогда
                    ОбъектГруппы = НайденнаяГруппа.ПолучитьОбъект();
                Иначе
                    ОбъектГруппы = Справочники.Группы.СоздатьЭлемент();
                КонецЕсли;
                
                ОбъектГруппы.Наименование = НаименованиеГруппы;
                
                Если ЗначениеЗаполнено(НаправлениеПодготовки) Тогда
                    ОбъектГруппы.НаправлениеПодготовки = НаправлениеПодготовки;
                КонецЕсли;
                
                Если ЗначениеЗаполнено(ФормаОбучения) Тогда
                    ОбъектГруппы.ФормаОбучения = ФормаОбучения;
                КонецЕсли;
                
                ОбъектГруппы.Записать();
                КоличествоОбработанных = КоличествоОбработанных + 1;
                
            Исключение
                Сообщить("Ошибка при обработке группы " + НаименованиеГруппы + ": " + ОписаниеОшибки());
            КонецПопытки;
        КонецЦикла;
        
        Результат.Успех = Истина;
        Результат.КоличествоОбработанных = КоличествоОбработанных;
        
    Исключение
        Результат.ТекстОшибки = ОписаниеОшибки();
    КонецПопытки;
    
    Возврат Результат;
    
КонецФункции



 //Заполнение справочника "Студенты"
&НаКлиенте
Процедура ЗагрузитьСтудентов(Команда)
    
    Если НЕ ЗначениеЗаполнено(ЗагрузкаJSON) Тогда
        Сообщить("Необходимо выбрать JSON файл для загрузки!");
        Возврат;
    КонецЕсли;
    
    Попытка
        ФайлДляРаботы = Новый ТекстовыйДокумент;
        ФайлДляРаботы.Прочитать(ЗагрузкаJSON, КодировкаТекста.UTF8);
        СодержимоеФайла = ФайлДляРаботы.ПолучитьТекст();
        
        РезультатЗагрузки = ЗагрузитьСтудентовНаСервере(СодержимоеФайла);
        
        Если РезультатЗагрузки.Успех Тогда
            Сообщить("Загрузка завершена успешно! Обработано студентов: " + РезультатЗагрузки.КоличествоОбработанных);
        Иначе
            Сообщить("Ошибка при загрузке: " + РезультатЗагрузки.ТекстОшибки);
        КонецЕсли;
        
    Исключение
        Сообщить("Ошибка при чтении файла: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

&НаСервере
Функция ЗагрузитьСтудентовНаСервере(СодержимоеJSON)
    
    Результат = Новый Структура;
    Результат.Вставить("Успех", Ложь);
    Результат.Вставить("ТекстОшибки", "");
    Результат.Вставить("КоличествоОбработанных", 0);
    Результат.Вставить("КоличествоУникальных", 0);
    Результат.Вставить("КоличествоСозданных", 0);
    Результат.Вставить("КоличествоОбновленных", 0);
    
    Попытка
        // Проверка входных данных
        Если НЕ ЗначениеЗаполнено(СодержимоеJSON) Тогда
            Результат.ТекстОшибки = "Содержимое JSON файла пустое";
            Возврат Результат;
        КонецЕсли;
        
        // Парсинг JSON
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(СодержимоеJSON);
        ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
        ЧтениеJSON.Закрыть();
        
        Если ДанныеJSON = Неопределено Тогда
            Результат.ТекстОшибки = "Не удалось распарсить JSON файл";
            Возврат Результат;
        КонецЕсли;
        
        // Проверка наличия массива групп
        Если НЕ ДанныеJSON.Свойство("groups") Тогда
            Результат.ТекстОшибки = "В JSON файле не найден массив 'groups'";
            Возврат Результат;
        КонецЕсли;
        
        МассивГрупп = ДанныеJSON.groups;
        КоличествоОбработанных = 0;
        КоличествоСозданных = 0;
        КоличествоОбновленных = 0;
        УникальныеСтуденты = Новый Соответствие;
        
        Для каждого Группа Из МассивГрупп Цикл
            Попытка
                Если НЕ Группа.Свойство("ДанныеГруппы") ИЛИ НЕ Группа.ДанныеГруппы.Свойство("students") Тогда
                    Продолжить;
                КонецЕсли;
                
                ДанныеГруппы = Группа.ДанныеГруппы;
                МассивСтудентов = ДанныеГруппы.students;
                
                // Получаем данные группы для всех студентов
                НомерГруппы = "";
                Если ДанныеГруппы.Свойство("groupNum") И ЗначениеЗаполнено(ДанныеГруппы.groupNum) Тогда
                    НомерГруппы = СокрЛП(ДанныеГруппы.groupNum);
                КонецЕсли;
                
                ГруппаСтудента = Неопределено;
                Если ЗначениеЗаполнено(НомерГруппы) Тогда
                    ГруппаСтудента = НайтиЭлементСправочника("Группы", НомерГруппы);
                КонецЕсли;
                
                Для каждого Студент Из МассивСтудентов Цикл
                    Попытка
                        // Проверяем наличие обязательного поля
                        Если НЕ Студент.Свойство("studBiletNum") ИЛИ НЕ ЗначениеЗаполнено(Студент.studBiletNum) Тогда
                            Продолжить;
                        КонецЕсли;
                        
                        НомерБилета = СокрЛП(Студент.studBiletNum);
                        
                        // Проверяем уникальность
                        Если УникальныеСтуденты.Получить(НомерБилета) <> Неопределено Тогда
                            Продолжить;
                        КонецЕсли;
                        
                        // Ищем существующего студента
                        СуществующийСтудент = Справочники.Студенты.НайтиПоРеквизиту("ЛичныйИндекс", НомерБилета);  
                        СозданНовый = Ложь;
               
                        Если ЗначениеЗаполнено(СуществующийСтудент) Тогда
                            ОбъектСтудента = СуществующийСтудент.ПолучитьОбъект();
                            КоличествоОбновленных = КоличествоОбновленных + 1;
                        Иначе
                            ОбъектСтудента = Справочники.Студенты.СоздатьЭлемент();
                            СозданНовый = Истина;
                            КоличествоСозданных = КоличествоСозданных + 1;
                        КонецЕсли; 
                        
                        // 0. Наименование (studentFIO)
                        Если Студент.Свойство("studentFIO") И ЗначениеЗаполнено(Студент.studentFIO) Тогда
                            ФИО = СокрЛП(Студент.studentFIO);
                            // Удаляем лишние пробелы между словами
                            ФИО = СтрЗаменить(ФИО, Символы.ПС, " ");
                            Пока СтрНайти(ФИО, "  ") > 0 Цикл
                                ФИО = СтрЗаменить(ФИО, "  ", " ");
                            КонецЦикла;
                            ОбъектСтудента.Наименование = ФИО;
                        ИначеЕсли НЕ ЗначениеЗаполнено(ОбъектСтудента.Наименование) Тогда
                            // Если ФИО нет, используем номер билета
                            ОбъектСтудента.Наименование = "Студент " + НомерБилета;
                        КонецЕсли;   
                        
                        // 1. ЛичныйИндекс (studBiletNum)
                        ОбъектСтудента.ЛичныйИндекс = НомерБилета;
                        
                        // 2. СтуденческийБилет (dogovorNum)
                        Если Студент.Свойство("dogovorNum") И ЗначениеЗаполнено(Студент.dogovorNum) Тогда
                            ОбъектСтудента.СтуденческийБилет = СокрЛП(Студент.dogovorNum);
                        КонецЕсли;
                        
                        // 3. Группа (groupNum)
                        Если ЗначениеЗаполнено(ГруппаСтудента) Тогда
                            ОбъектСтудента.Группа = ГруппаСтудента;
                        КонецЕсли;
                        
                        // 4. Факультет (faculty)
                        Если Студент.Свойство("faculty") И ЗначениеЗаполнено(Студент.faculty) Тогда
                            НаименованиеФакультета = СокрЛП(Студент.faculty);
                            Факультет = НайтиЭлементСправочникаФакультета(НаименованиеФакультета);
                            Если ЗначениеЗаполнено(Факультет) Тогда
                                ОбъектСтудента.Факультет = Факультет;
                            ИначеЕсли СозданНовый Тогда
                                Сообщить("Не найден факультет: " + НаименованиеФакультета);
                            КонецЕсли;
                        КонецЕсли;                        
                        
                        // 5. НаправлениеПодготовки (speciality)
                        Если Студент.Свойство("speciality") И ЗначениеЗаполнено(Студент.speciality) Тогда
                            НаименованиеНаправленияПолное = СокрЛП(Студент.speciality);
                            
                            // Извлекаем только название направления (убираем текст в скобках)
                            ПозицияСкобки = СтрНайти(НаименованиеНаправленияПолное, "[");
                            Если ПозицияСкобки > 0 Тогда
                                НаименованиеНаправления = СокрЛП(Лев(НаименованиеНаправленияПолное, ПозицияСкобки - 1));
                            Иначе
                                НаименованиеНаправления = НаименованиеНаправленияПолное;
                            КонецЕсли;
                            
                            НаправлениеПодготовки = НайтиНаправлениеПодготовки(НаименованиеНаправления);
                            Если ЗначениеЗаполнено(НаправлениеПодготовки) Тогда
                                ОбъектСтудента.НаправлениеПодготовки = НаправлениеПодготовки;
                            ИначеЕсли СозданНовый Тогда
                                Сообщить("Не найдено направление подготовки: " + НаименованиеНаправления);
                            КонецЕсли;
                        КонецЕсли;
                        
                        // 6. ПрофильСтудента (profile)
                        Если Студент.Свойство("profile") И ЗначениеЗаполнено(Студент.profile) Тогда
                            НаименованиеПрофиля = СокрЛП(Студент.profile);
                            ПрофильСтудента = НайтиЭлементСправочника("ПрофилиПодготовкиСтудентов", НаименованиеПрофиля);
                            Если ЗначениеЗаполнено(ПрофильСтудента) Тогда
                                ОбъектСтудента.ПрофильСтудента = ПрофильСтудента;
                            ИначеЕсли СозданНовый Тогда
                                Сообщить("Не найден профиль: " + НаименованиеПрофиля);
                            КонецЕсли;
                        КонецЕсли;
                        
                        // 7. Семестр (semester)
                       Если Студент.Свойство("semester") И ЗначениеЗаполнено(Студент.semester) Тогда
                            НомерСеместра = СокрЛП(Строка(Студент.semester));
                            Семестр = ПолучитьСеместрПоНомеру(НомерСеместра);
                            
                            Если ЗначениеЗаполнено(Семестр) Тогда
                                ОбъектСтудента.Семестр = Семестр;
								
                                // 8. Курс (вычисляем по семестру)
                                Курс = ПолучитьКурсПоСеместру(Семестр);
                                ОбъектСтудента.Курс = Курс;
								
								
							ИначеЕсли СозданНовый Тогда
                                // Устанавливаем курс по умолчанию
                                ОбъектСтудента.Курс = Перечисления.Курсы.Первый;
                            КонецЕсли;
                        ИначеЕсли СозданНовый Тогда
                            // Если семестр не указан, устанавливаем курс по умолчанию
                            ОбъектСтудента.Курс = Перечисления.Курсы.Первый;
                            Сообщить("Для студента " + ОбъектСтудента.Наименование + 
                            " не указан семестр - установлен курс по умолчанию");
						КонецЕсли;
						
                        // 9. ФормаОбучения (studyform)
                        Если Студент.Свойство("studyform") И ЗначениеЗаполнено(Студент.studyform) Тогда
                            ФормаОбученияИзJSON = СокрЛП(Студент.studyform);
                            ФормаОбучения = ПолучитьФормуОбучения(ФормаОбученияИзJSON);
                            Если ЗначениеЗаполнено(ФормаОбучения) Тогда
                                ОбъектСтудента.ФормаОбучения = ФормаОбучения;
                            ИначеЕсли СозданНовый Тогда
                                Сообщить("Неизвестная форма обучения: " + ФормаОбученияИзJSON);
                            КонецЕсли;
                        КонецЕсли;
                        
                        // Записываем студента
                        ОбъектСтудента.Записать();
                        УникальныеСтуденты.Вставить(НомерБилета, Истина);
                        КоличествоОбработанных = КоличествоОбработанных + 1;
                        
                        Если СозданНовый Тогда
                            Сообщить("Создан новый студент: " + ОбъектСтудента.Наименование + " (Личный индекс: " + НомерБилета + ")");
                        Иначе
                            Сообщить("Обновлен студент: " + ОбъектСтудента.Наименование + " (Личный индекс: " + НомерБилета + ")");
                        КонецЕсли;
                        
                    Исключение
                        ТекстОшибки = "Ошибка при обработке студента с номером билета " + НомерБилета + ": " + ОписаниеОшибки();
                        Сообщить(ТекстОшибки);
                    КонецПопытки;
                КонецЦикла;
                
            Исключение
                ТекстОшибки = "Ошибка при обработке группы: " + ОписаниеОшибки();
                Сообщить(ТекстОшибки);
            КонецПопытки;
        КонецЦикла;
        
        Результат.Успех = Истина;
        Результат.КоличествоОбработанных = КоличествоОбработанных;
        Результат.КоличествоУникальных = УникальныеСтуденты.Количество();
        Результат.КоличествоСозданных = КоличествоСозданных;
        Результат.КоличествоОбновленных = КоличествоОбновленных;
        
    Исключение
        Результат.ТекстОшибки = "Общая ошибка при загрузке: " + ОписаниеОшибки();
    КонецПопытки;
    
    Возврат Результат;
КонецФункции

&НаСервере
Функция НайтиЭлементСправочникаФакультета(НаименованиеФакультета)
    
    Спр = Справочники.Факультеты;
    НайденныйЭлемент = Неопределено;
    
    // Попробуем найти среди обычных элементов
    НайденныйЭлемент = Спр.НайтиПоНаименованию(НаименованиеФакультета);
    
    // Если не нашли по точному совпадению, попробуем найти по части наименования
    Если НЕ ЗначениеЗаполнено(НайденныйЭлемент) Тогда
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |    Факультеты.Ссылка КАК Ссылка
        |ИЗ
        |    Справочник.Факультеты КАК Факультеты
        |ГДЕ
        |    Факультеты.Наименование ПОДОБНО &Наименование";
        
        Запрос.УстановитьПараметр("Наименование", "%" + НаименованиеФакультета + "%");
        
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если Выборка.Следующий() Тогда
            НайденныйЭлемент = Выборка.Ссылка;
        КонецЕсли;
    КонецЕсли;
    
    Возврат НайденныйЭлемент;
КонецФункции

&НаСервере
Функция НайтиНаправлениеПодготовки(НаименованиеНаправления)
    
    // Сначала попробуем найти точное совпадение
    НаправлениеПодготовки = Справочники.НаправленияПодготовки.НайтиПоНаименованию(НаименованиеНаправления);
    
    // Если не нашли, попробуем найти по части наименования или коду
    Если НЕ ЗначениеЗаполнено(НаправлениеПодготовки) Тогда
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |    НаправлениеПодготовки.Ссылка КАК Ссылка
        |ИЗ
        |    Справочник.НаправлениеПодготовки КАК НаправлениеПодготовки
        |ГДЕ
        |    НаправлениеПодготовки.Наименование ПОДОБНО &Наименование
        |    ИЛИ НаправлениеПодготовки.Код ПОДОБНО &Наименование";
        
        Запрос.УстановитьПараметр("Наименование", "%" + НаименованиеНаправления + "%");
        
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если Выборка.Следующий() Тогда
            НаправлениеПодготовки = Выборка.Ссылка;
        КонецЕсли;
    КонецЕсли;
    
    Возврат НаправлениеПодготовки;
    
КонецФункции

&НаСервере
Функция НайтиЭлементСправочника(ИмяСправочника, КодИлиНаименование)
    
    Спр = Справочники[ИмяСправочника];
    НайденныйЭлемент = Спр.НайтиПоКоду(КодИлиНаименование);
    
    Если НЕ ЗначениеЗаполнено(НайденныйЭлемент) Тогда
        НайденныйЭлемент = Спр.НайтиПоНаименованию(КодИлиНаименование);
    КонецЕсли;
    
    Возврат НайденныйЭлемент;
    
КонецФункции

&НаСервере
Функция ПолучитьСеместрПоНомеру(НомерСеместра)
    
    Соответствие = Новый Соответствие;
    Соответствие.Вставить("1", Перечисления.Семестры.Первый);
    Соответствие.Вставить("2", Перечисления.Семестры.Второй);
    Соответствие.Вставить("3", Перечисления.Семестры.Третий);
    Соответствие.Вставить("4", Перечисления.Семестры.Четвертый);
    Соответствие.Вставить("5", Перечисления.Семестры.Пятый);
    Соответствие.Вставить("6", Перечисления.Семестры.Шестой);
    Соответствие.Вставить("7", Перечисления.Семестры.Седьмой);
    Соответствие.Вставить("8", Перечисления.Семестры.Восьмой);
    Соответствие.Вставить("9", Перечисления.Семестры.Девятый);
    Соответствие.Вставить("10", Перечисления.Семестры.Десятый);
    
    Ключ = Строка(НомерСеместра);
    Если Соответствие.Получить(Ключ) <> Неопределено Тогда
        Возврат Соответствие.Получить(Ключ);
    КонецЕсли;
    
    Возврат Неопределено;
    
КонецФункции

&НаСервере
Функция ПолучитьКурсПоСеместру(Семестр)
    
    Если Семестр = Перечисления.Семестры.Первый ИЛИ 
       Семестр = Перечисления.Семестры.Второй Тогда  
        Возврат Перечисления.Курсы.Первый; 
    
    ИначеЕсли Семестр = Перечисления.Семестры.Третий ИЛИ 
             Семестр = Перечисления.Семестры.Четвертый Тогда  
        Возврат Перечисления.Курсы.Второй; 
    
    ИначеЕсли Семестр = Перечисления.Семестры.Пятый ИЛИ 
             Семестр = Перечисления.Семестры.Шестой Тогда  
        Возврат Перечисления.Курсы.Третий; 
    
    ИначеЕсли Семестр = Перечисления.Семестры.Седьмой ИЛИ 
             Семестр = Перечисления.Семестры.Восьмой Тогда  
        Возврат Перечисления.Курсы.Четвертый; 
    
    ИначеЕсли Семестр = Перечисления.Семестры.Девятый ИЛИ 
             Семестр = Перечисления.Семестры.Десятый Тогда  
        Возврат Перечисления.Курсы.Пятый;
    
    ИначеЕсли Семестр = Перечисления.Семестры.Одиннадцатый ИЛИ 
             Семестр = Перечисления.Семестры.Двенадцатый Тогда  
        Возврат Перечисления.Курсы.Шестой; 
    
    КонецЕсли;
    
    // Возвращаем первый курс по умолчанию, если семестр не распознан
    Возврат Перечисления.Курсы.Первый;
    
КонецФункции

&НаСервере
Функция ПолучитьФормуОбучения(ФормаОбученияИзJSON)
    
    ФормаОбученияИзJSON = ВРег(СокрЛП(ФормаОбученияИзJSON));
    
    Если ФормаОбученияИзJSON = "ОЧНАЯ" Тогда
        Возврат Перечисления.ФормаОбучения.Очная;
    ИначеЕсли ФормаОбученияИзJSON = "ЗАОЧНАЯ" Тогда
        Возврат Перечисления.ФормаОбучения.Заочная;
    ИначеЕсли ФормаОбученияИзJSON = "ОЧНО-ЗАОЧНАЯ" Тогда
        Возврат Перечисления.ФормаОбучения.ОчноЗаочная;
    КонецЕсли;
    
    Возврат Неопределено;
    
КонецФункции        




 //Заполнение справочника "ФормыОбученияСтудентов"
&НаКлиенте
Процедура ЗагрузитьФормыОбученияСтудентов(Команда)
    
    Если НЕ ЗначениеЗаполнено(ЗагрузкаJSON) Тогда
        Сообщить("Необходимо выбрать JSON файл для загрузки!");
        Возврат;
    КонецЕсли;
    
    Попытка
        ФайлДляРаботы = Новый ТекстовыйДокумент;
        ФайлДляРаботы.Прочитать(ЗагрузкаJSON, КодировкаТекста.UTF8);
        СодержимоеФайла = ФайлДляРаботы.ПолучитьТекст();
        
        РезультатЗагрузки = ЗагрузитьФормыОбученияСтудентовНаСервере(СодержимоеФайла);
        
        Если РезультатЗагрузки.Успех Тогда
            Сообщить("Загрузка завершена успешно! Обработано студентов: " + РезультатЗагрузки.КоличествоОбработанных + 
                     ", создано новых записей: " + РезультатЗагрузки.КоличествоСозданныхФорм);
        Иначе
            Сообщить("Ошибка при загрузке: " + РезультатЗагрузки.ТекстОшибки);
        КонецЕсли;
        
    Исключение
        Сообщить("Ошибка при чтении файла: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

&НаСервере
Функция ЗагрузитьФормыОбученияСтудентовНаСервере(СодержимоеJSON)
    
    Результат = Новый Структура;
    Результат.Вставить("Успех", Ложь);
    Результат.Вставить("ТекстОшибки", "");
    Результат.Вставить("КоличествоОбработанных", 0);
    Результат.Вставить("КоличествоСозданныхФорм", 0);
    
    Попытка
        // Проверка входных данных
        Если НЕ ЗначениеЗаполнено(СодержимоеJSON) Тогда
            Результат.ТекстОшибки = "Содержимое JSON файла пустое";
            Возврат Результат;
        КонецЕсли;
        
        // Парсинг JSON
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(СодержимоеJSON);
        ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
        ЧтениеJSON.Закрыть();
        
        Если ДанныеJSON = Неопределено Тогда
            Результат.ТекстОшибки = "Не удалось распарсить JSON файл";
            Возврат Результат;
        КонецЕсли;
        
        // Проверка наличия массива групп
        Если НЕ ДанныеJSON.Свойство("groups") Тогда
            Результат.ТекстОшибки = "В JSON файле не найден массив 'groups'";
            Возврат Результат;
        КонецЕсли;
        
        МассивГрупп = ДанныеJSON.groups;
        КоличествоОбработанных = 0;
        КоличествоСозданныхФорм = 0;
        
        Для каждого Группа Из МассивГрупп Цикл
            Попытка
                Если НЕ Группа.Свойство("ДанныеГруппы") ИЛИ НЕ Группа.ДанныеГруппы.Свойство("students") Тогда
                    Продолжить;
                КонецЕсли;
                
                ДанныеГруппы = Группа.ДанныеГруппы;
                МассивСтудентов = ДанныеГруппы.students;
                
                Для каждого Студент Из МассивСтудентов Цикл
                    Попытка
                        // Проверяем обязательные поля
                        Если НЕ Студент.Свойство("studentFIO") ИЛИ НЕ ЗначениеЗаполнено(Студент.studentFIO) Тогда
                            Продолжить;
                        КонецЕсли;
                        
                        Если НЕ Студент.Свойство("studyform") ИЛИ НЕ ЗначениеЗаполнено(Студент.studyform) Тогда
                            Продолжить;
                        КонецЕсли;
                        
                        // Получаем данные студента
                        ФИОСтудента = СокрЛП(Студент.studentFIO);
                        ФормаОбученияИзJSON = ПолучитьФормуОбучения(Студент.studyform);
                        
                        Если ФормаОбученияИзJSON = Неопределено Тогда
                            Продолжить; // Форма обучения не распознана
                        КонецЕсли;
                        
                        // Ищем студента в справочнике по различным вариантам поиска
                        СсылкаНаСтудента = НайтиСтудентаПоФИО(ФИОСтудента);
                        
                        Если НЕ ЗначениеЗаполнено(СсылкаНаСтудента) Тогда
                            Сообщить("Студент не найден: " + ФИОСтудента);
                            Продолжить; // Студент не найден
                        КонецЕсли;
                        
                        // Проверяем существование записи формы обучения
                        ЭлементФормы = Неопределено;
                        
                        // Правильный поиск по реквизиту
                        Запрос = Новый Запрос;
                        Запрос.Текст = "ВЫБРАТЬ
                                      |    Ссылка
                                      |ИЗ
                                      |    Справочник.ФормыОбученияСтудентов
                                      |ГДЕ
                                      |    Студент = &Студент";
                        Запрос.УстановитьПараметр("Студент", СсылкаНаСтудента);
                        
                        РезультатЗапроса = Запрос.Выполнить();
                        
                        Если НЕ РезультатЗапроса.Пустой() Тогда
                            Выборка = РезультатЗапроса.Выбрать();
                            Выборка.Следующий();
                            ЭлементФормы = Выборка.Ссылка.ПолучитьОбъект();
                        Иначе
                            ЭлементФормы = Справочники.ФормыОбученияСтудентов.СоздатьЭлемент();
                            КоличествоСозданныхФорм = КоличествоСозданныхФорм + 1;
                        КонецЕсли;
                        
                        // Заполняем реквизиты
                        ЭлементФормы.Наименование = ФИОСтудента + " - " + Строка(ФормаОбученияИзJSON);
                        ЭлементФормы.Студент = СсылкаНаСтудента;
                        ЭлементФормы.ФормаОбучения = ФормаОбученияИзJSON;
                        
                        // Записываем изменения
                        ЭлементФормы.Записать();
                        КоличествоОбработанных = КоличествоОбработанных + 1;
                        
                        Сообщить("Обработана форма обучения для студента: " + ФИОСтудента + " (" + Строка(ФормаОбученияИзJSON) + ")");
                        
                    Исключение
                        ТекстОшибки = "Ошибка при обработке студента " + ?(ЗначениеЗаполнено(ФИОСтудента), ФИОСтудента, "неизвестен") + ": " + ОписаниеОшибки();
                        Сообщить(ТекстОшибки);
                    КонецПопытки;
                КонецЦикла;
                
            Исключение
                ТекстОшибки = "Ошибка при обработке группы: " + ОписаниеОшибки();
                Сообщить(ТекстОшибки);
            КонецПопытки;
        КонецЦикла;
        
        Результат.Успех = Истина;
        Результат.КоличествоОбработанных = КоличествоОбработанных;
        Результат.КоличествоСозданныхФорм = КоличествоСозданныхФорм;
        
    Исключение
        Результат.ТекстОшибки = "Общая ошибка при загрузке: " + ОписаниеОшибки();
    КонецПопытки;
    
    Возврат Результат;
КонецФункции

&НаСервере
Функция НайтиСтудентаПоФИО(ФИОСтудента)
    
    СсылкаНаСтудента = Неопределено;
    
    // Поиск по точному совпадению наименования
    СсылкаНаСтудента = Справочники.Студенты.НайтиПоНаименованию(ФИОСтудента);
    
    Если ЗначениеЗаполнено(СсылкаНаСтудента) Тогда
        Возврат СсылкаНаСтудента;
    КонецЕсли;
    
    // Поиск через запрос с частичным совпадением
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
                  |    Ссылка
                  |ИЗ
                  |    Справочник.Студенты
                  |ГДЕ
                  |    НЕ ПометкаУдаления
                  |    И (Наименование ПОДОБНО &ФИО1
                  |    ИЛИ Наименование ПОДОБНО &ФИО2
                  |    ИЛИ Наименование ПОДОБНО &ФИО3)";
    
    // Варианты поиска с подстановочными знаками
    Запрос.УстановитьПараметр("ФИО1", "%" + ФИОСтудента + "%");
    Запрос.УстановитьПараметр("ФИО2", ФИОСтудента + "%");
    Запрос.УстановитьПараметр("ФИО3", "%" + ФИОСтудента);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если НЕ РезультатЗапроса.Пустой() Тогда
        Выборка = РезультатЗапроса.Выбрать();
        Выборка.Следующий();
        СсылкаНаСтудента = Выборка.Ссылка;
    КонецЕсли;
    
    Возврат СсылкаНаСтудента;
    
КонецФункции




 //Заполнение справочника "СеместрыСтудентов"
&НаКлиенте
Процедура ЗагрузитьСеместрыСтудентов(Команда)
    
    Если НЕ ЗначениеЗаполнено(ЗагрузкаJSON) Тогда
        Сообщить("Необходимо выбрать JSON файл для загрузки!");
        Возврат;
    КонецЕсли;
    
    Попытка
        ФайлДляРаботы = Новый ТекстовыйДокумент;
        ФайлДляРаботы.Прочитать(ЗагрузкаJSON, КодировкаТекста.UTF8);
        СодержимоеФайла = ФайлДляРаботы.ПолучитьТекст();
        
        РезультатЗагрузки = ЗагрузитьСеместрыСтудентовНаСервере(СодержимоеФайла);
        
        Если РезультатЗагрузки.Успех Тогда
            Сообщить("Загрузка завершена успешно! Обработано студентов: " + РезультатЗагрузки.КоличествоОбработанных + 
                     ", создано новых записей: " + РезультатЗагрузки.КоличествоСозданныхЗаписей);
        Иначе
            Сообщить("Ошибка при загрузке: " + РезультатЗагрузки.ТекстОшибки);
        КонецЕсли;
        
    Исключение
        Сообщить("Ошибка при чтении файла: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

&НаСервере
Функция ЗагрузитьСеместрыСтудентовНаСервере(СодержимоеJSON)
    
    Результат = Новый Структура;
    Результат.Вставить("Успех", Ложь);
    Результат.Вставить("ТекстОшибки", "");
    Результат.Вставить("КоличествоОбработанных", 0);
    Результат.Вставить("КоличествоСозданныхЗаписей", 0);
    
    Попытка
        // Проверка входных данных
        Если НЕ ЗначениеЗаполнено(СодержимоеJSON) Тогда
            Результат.ТекстОшибки = "Содержимое JSON файла пустое";
            Возврат Результат;
        КонецЕсли;
        
        // Парсинг JSON
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(СодержимоеJSON);
        ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
        ЧтениеJSON.Закрыть();
        
        Если ДанныеJSON = Неопределено Тогда
            Результат.ТекстОшибки = "Не удалось распарсить JSON файл";
            Возврат Результат;
        КонецЕсли;
        
        // Проверка наличия массива групп
        Если НЕ ДанныеJSON.Свойство("groups") Тогда
            Результат.ТекстОшибки = "В JSON файле не найден массив 'groups'";
            Возврат Результат;
        КонецЕсли;
        
        МассивГрупп = ДанныеJSON.groups;
        КоличествоОбработанных = 0;
        КоличествоСозданныхЗаписей = 0;
        
        Для каждого Группа Из МассивГрупп Цикл
            Попытка
                Если НЕ Группа.Свойство("ДанныеГруппы") ИЛИ НЕ Группа.ДанныеГруппы.Свойство("students") Тогда
                    Продолжить;
                КонецЕсли;
                
                ДанныеГруппы = Группа.ДанныеГруппы;
                МассивСтудентов = ДанныеГруппы.students;
                
                Для каждого Студент Из МассивСтудентов Цикл
                    Попытка
                        // Проверяем обязательные поля
                        Если НЕ Студент.Свойство("studentFIO") ИЛИ НЕ ЗначениеЗаполнено(Студент.studentFIO) Тогда
                            Продолжить;
                        КонецЕсли;
                        
                        Если НЕ Студент.Свойство("semester") ИЛИ НЕ ЗначениеЗаполнено(Студент.semester) Тогда
                            Продолжить;
                        КонецЕсли;
                        
                        // Получаем данные студента
                        ФИОСтудента = СокрЛП(Студент.studentFIO);
                        СеместрИзJSON = ПолучитьСеместрПоНомеру(Студент.semester);
                        
                        Если СеместрИзJSON = Неопределено Тогда
                            Сообщить("Семестр не распознан для студента " + ФИОСтудента + ": " + Студент.semester);
                            Продолжить; // Семестр не распознан
                        КонецЕсли;
                        
                        // Ищем студента в справочнике по различным вариантам поиска
                        СсылкаНаСтудента = НайтиСтудентаПоФИО(ФИОСтудента);
                        
                        Если НЕ ЗначениеЗаполнено(СсылкаНаСтудента) Тогда
                            Сообщить("Студент не найден: " + ФИОСтудента);
                            Продолжить; // Студент не найден
                        КонецЕсли;
                        
                        // Проверяем существование записи семестра студента
                        ЭлементСеместра = Неопределено;
                        
                        // Правильный поиск по реквизиту
                        Запрос = Новый Запрос;
                        Запрос.Текст = "ВЫБРАТЬ
                                      |    Ссылка
                                      |ИЗ
                                      |    Справочник.СеместрыСтудентов
                                      |ГДЕ
                                      |    Студент = &Студент";
                        Запрос.УстановитьПараметр("Студент", СсылкаНаСтудента);
                        
                        РезультатЗапроса = Запрос.Выполнить();
                        
                        Если НЕ РезультатЗапроса.Пустой() Тогда
                            Выборка = РезультатЗапроса.Выбрать();
                            Выборка.Следующий();
                            ЭлементСеместра = Выборка.Ссылка.ПолучитьОбъект();
                        Иначе
                            ЭлементСеместра = Справочники.СеместрыСтудентов.СоздатьЭлемент();
                            КоличествоСозданныхЗаписей = КоличествоСозданныхЗаписей + 1;
                        КонецЕсли;
                        
                        // Заполняем реквизиты
                        ЭлементСеместра.Наименование = ФИОСтудента + " - " + Строка(СеместрИзJSON) + " семестр";
                        ЭлементСеместра.Студент = СсылкаНаСтудента;
                        ЭлементСеместра.Семестр = СеместрИзJSON;
                        
                        // Записываем изменения
                        ЭлементСеместра.Записать();
                        КоличествоОбработанных = КоличествоОбработанных + 1;
                        
                        Сообщить("Обработан семестр для студента: " + ФИОСтудента + " (" + Строка(СеместрИзJSON) + " семестр)");
                        
                    Исключение
                        ТекстОшибки = "Ошибка при обработке студента " + ?(ЗначениеЗаполнено(ФИОСтудента), ФИОСтудента, "неизвестен") + ": " + ОписаниеОшибки();
                        Сообщить(ТекстОшибки);
                    КонецПопытки;
                КонецЦикла;
                
            Исключение
                ТекстОшибки = "Ошибка при обработке группы: " + ОписаниеОшибки();
                Сообщить(ТекстОшибки);
            КонецПопытки;
        КонецЦикла;
        
        Результат.Успех = Истина;
        Результат.КоличествоОбработанных = КоличествоОбработанных;
        Результат.КоличествоСозданныхЗаписей = КоличествоСозданныхЗаписей;
        
    Исключение
        Результат.ТекстОшибки = "Общая ошибка при загрузке: " + ОписаниеОшибки();
    КонецПопытки;
    
    Возврат Результат;
КонецФункции




 //Заполнение справочника "СтуденческиеБилеты"
&НаСервере
Функция ЗагрузитьСтуденческиеБилетыНаСервере(СодержимоеJSON)
    
    Результат = Новый Структура;
    Результат.Вставить("Успех", Ложь);
    Результат.Вставить("ТекстОшибки", "");
    Результат.Вставить("КоличествоОбработанных", 0);
    Результат.Вставить("КоличествоСозданныхЗаписей", 0);
    
    Попытка
        // Проверка входных данных
        Если НЕ ЗначениеЗаполнено(СодержимоеJSON) Тогда
            Результат.ТекстОшибки = "Содержимое JSON файла пустое";
            Возврат Результат;
        КонецЕсли;
        
        // Парсинг JSON
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(СодержимоеJSON);
        ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
        ЧтениеJSON.Закрыть();
        
        Если ДанныеJSON = Неопределено Тогда
            Результат.ТекстОшибки = "Не удалось распарсить JSON файл";
            Возврат Результат;
        КонецЕсли;
        
        // Проверка наличия массива групп
        Если НЕ ДанныеJSON.Свойство("groups") Тогда
            Результат.ТекстОшибки = "В JSON файле не найден массив 'groups'";
            Возврат Результат;
        КонецЕсли;
        
        МассивГрупп = ДанныеJSON.groups;
        КоличествоОбработанных = 0;
        КоличествоСозданныхЗаписей = 0;
        
        Для каждого Группа Из МассивГрупп Цикл
            Попытка
                Если НЕ Группа.Свойство("ДанныеГруппы") ИЛИ НЕ Группа.ДанныеГруппы.Свойство("students") Тогда
                    Продолжить;
                КонецЕсли;
                
                ДанныеГруппы = Группа.ДанныеГруппы;
                МассивСтудентов = ДанныеГруппы.students;
                
                Для каждого Студент Из МассивСтудентов Цикл
                    Попытка
                        // Проверяем обязательные поля
                        Если НЕ Студент.Свойство("studentFIO") ИЛИ НЕ ЗначениеЗаполнено(Студент.studentFIO) Тогда
                            Продолжить;
                        КонецЕсли;
                        
                        Если НЕ Студент.Свойство("dogovorNum") ИЛИ НЕ ЗначениеЗаполнено(Студент.dogovorNum) Тогда
                            Продолжить;
                        КонецЕсли;
                        
                        // Получаем данные студента
                        ФИОСтудента = СокрЛП(Студент.studentFIO);
                        НомерБилета = СокрЛП(Студент.dogovorNum);
                        
                        // Ищем студента в справочнике по ФИО
                        СсылкаНаСтудента = НайтиСтудентаПоФИО(ФИОСтудента);
                        
                        Если НЕ ЗначениеЗаполнено(СсылкаНаСтудента) Тогда
                            Сообщить("Студент не найден: " + ФИОСтудента);
                            Продолжить; // Студент не найден
                        КонецЕсли;
                        
                        // Проверяем существование записи студенческого билета
                        ЭлементБилета = Неопределено;
                        
                        // Поиск по номеру билета и студенту
                        Запрос = Новый Запрос;
                        Запрос.Текст = 
                        "ВЫБРАТЬ
                        |    СтуденческиеБилеты.Ссылка
                        |ИЗ
                        |    Справочник.СтуденческиеБилеты КАК СтуденческиеБилеты
                        |ГДЕ
                        |    СтуденческиеБилеты.ФИОСтудента = &ФИОСтудента
                        |    И СтуденческиеБилеты.Наименование = &НомерБилета";
                        
                        Запрос.УстановитьПараметр("ФИОСтудента", СсылкаНаСтудента);
                        Запрос.УстановитьПараметр("НомерБилета", НомерБилета);
                        
                        РезультатЗапроса = Запрос.Выполнить();
                        
                        Если НЕ РезультатЗапроса.Пустой() Тогда
                            // Запись уже существует, обновляем если нужно
                            Выборка = РезультатЗапроса.Выбрать();
                            Выборка.Следующий();
                            ЭлементБилета = Выборка.Ссылка.ПолучитьОбъект();
                        Иначе
                            // Создаем новую запись
                            ЭлементБилета = Справочники.СтуденческиеБилеты.СоздатьЭлемент();
                            ЭлементБилета.Наименование = НомерБилета;
                            КоличествоСозданныхЗаписей = КоличествоСозданныхЗаписей + 1;
                        КонецЕсли;
                        
                        // Заполняем реквизиты
                        ЭлементБилета.ФИОСтудента = СсылкаНаСтудента;                         
                                             
                        // Записываем изменения
                        ЭлементБилета.Записать();
                        КоличествоОбработанных = КоличествоОбработанных + 1;
                        
                        Сообщить("Обработан студенческий билет для студента: " + ФИОСтудента + " (билет № " + НомерБилета + ")");
                        
                    Исключение
                        ТекстОшибки = "Ошибка при обработке студента " + ?(ЗначениеЗаполнено(ФИОСтудента), ФИОСтудента, "неизвестен") + ": " + ОписаниеОшибки();
                        Сообщить(ТекстОшибки);
                    КонецПопытки;
                КонецЦикла;
                
            Исключение
                ТекстОшибки = "Ошибка при обработке группы: " + ОписаниеОшибки();
                Сообщить(ТекстОшибки);
            КонецПопытки;
        КонецЦикла;
        
        Результат.Успех = Истина;
        Результат.КоличествоОбработанных = КоличествоОбработанных;
        Результат.КоличествоСозданныхЗаписей = КоличествоСозданныхЗаписей;
        
    Исключение
        Результат.ТекстОшибки = "Общая ошибка при загрузке: " + ОписаниеОшибки();
    КонецПопытки;
    
    Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСтуденческиеБилеты(Команда)
    Если НЕ ЗначениеЗаполнено(ЗагрузкаJSON) Тогда
        Сообщить("Необходимо выбрать JSON файл для загрузки!");
        Возврат;
    КонецЕсли;
    
    Попытка
        ФайлДляРаботы = Новый ТекстовыйДокумент;
        ФайлДляРаботы.Прочитать(ЗагрузкаJSON, КодировкаТекста.UTF8);
        СодержимоеФайла = ФайлДляРаботы.ПолучитьТекст();
        
        РезультатЗагрузки = ЗагрузитьСтуденческиеБилетыНаСервере(СодержимоеФайла);
        
        Если РезультатЗагрузки.Успех Тогда
            Сообщить("Загрузка завершена успешно! Обработано студентов: " + РезультатЗагрузки.КоличествоОбработанных + 
                     ", создано новых записей: " + РезультатЗагрузки.КоличествоСозданныхЗаписей);
        Иначе
            Сообщить("Ошибка при загрузке: " + РезультатЗагрузки.ТекстОшибки);
        КонецЕсли;
        
    Исключение
        Сообщить("Ошибка при чтении файла: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры




  //Заполнение справочника "ЛичныеИндексыСтудентов"
&НаСервере
Функция ЗагрузитьЛичныеИндексыСтудентовНаСервере(СодержимоеJSON)
    
    Результат = Новый Структура;
    Результат.Вставить("Успех", Ложь);
    Результат.Вставить("ТекстОшибки", "");
    Результат.Вставить("КоличествоОбработанных", 0);
    Результат.Вставить("КоличествоСозданныхЗаписей", 0);
    
    Попытка
        // Проверка входных данных
        Если НЕ ЗначениеЗаполнено(СодержимоеJSON) Тогда
            Результат.ТекстОшибки = "Содержимое JSON файла пустое";
            Возврат Результат;
        КонецЕсли;
        
        // Парсинг JSON
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(СодержимоеJSON);
        ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
        ЧтениеJSON.Закрыть();
        
        Если ДанныеJSON = Неопределено Тогда
            Результат.ТекстОшибки = "Не удалось распарсить JSON файл";
            Возврат Результат;
        КонецЕсли;
        
        // Проверка наличия массива групп
        Если НЕ ДанныеJSON.Свойство("groups") Тогда
            Результат.ТекстОшибки = "В JSON файле не найден массив 'groups'";
            Возврат Результат;
        КонецЕсли;
        
        МассивГрупп = ДанныеJSON.groups;
        КоличествоОбработанных = 0;
        КоличествоСозданныхЗаписей = 0;
        
        Для каждого Группа Из МассивГрупп Цикл
            Попытка
                Если НЕ Группа.Свойство("ДанныеГруппы") ИЛИ НЕ Группа.ДанныеГруппы.Свойство("students") Тогда
                    Продолжить;
                КонецЕсли;
                
                ДанныеГруппы = Группа.ДанныеГруппы;
                МассивСтудентов = ДанныеГруппы.students;
                
                Для каждого Студент Из МассивСтудентов Цикл
                    Попытка
                        // Проверяем обязательные поля
                        Если НЕ Студент.Свойство("studentFIO") ИЛИ НЕ ЗначениеЗаполнено(Студент.studentFIO) Тогда
                            Продолжить;
                        КонецЕсли;
                        
                        Если НЕ Студент.Свойство("studBiletNum") ИЛИ НЕ ЗначениеЗаполнено(Студент.studBiletNum) Тогда
                            Продолжить;
                        КонецЕсли;
                        
                        // Получаем данные студента
                        ФИОСтудента = СокрЛП(Студент.studentFIO);
                        ЛичныйИндекс = СокрЛП(Студент.studBiletNum);
                        
                        // Ищем студента в справочнике по ФИО
                        СсылкаНаСтудента = НайтиСтудентаПоФИО(ФИОСтудента);
                        
                        Если НЕ ЗначениеЗаполнено(СсылкаНаСтудента) Тогда
                            Сообщить("Студент не найден: " + ФИОСтудента);
                            Продолжить; // Студент не найден
                        КонецЕсли;
                        
                        // Проверяем существование записи личного индекса
                        ЭлементИндекса = Неопределено;
                        
                        // Поиск по личному индексу и студенту
                        Запрос = Новый Запрос;
                        Запрос.Текст = 
                        "ВЫБРАТЬ
                        |    ЛичныеИндексыСтудентов.Ссылка
                        |ИЗ
                        |    Справочник.ЛичныеИндексыСтудентов КАК ЛичныеИндексыСтудентов
                        |ГДЕ
                        |    ЛичныеИндексыСтудентов.Студент = &СсылкаНаСтудента
                        |    И ЛичныеИндексыСтудентов.Наименование = &ЛичныйИндекс";
                        
                        Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
                        Запрос.УстановитьПараметр("ЛичныйИндекс", ЛичныйИндекс);
                        
                        РезультатЗапроса = Запрос.Выполнить();
                        
                        Если НЕ РезультатЗапроса.Пустой() Тогда
                            // Запись уже существует, обновляем если нужно
                            Выборка = РезультатЗапроса.Выбрать();
                            Выборка.Следующий();
                            ЭлементИндекса = Выборка.Ссылка.ПолучитьОбъект();
                        Иначе
                            // Создаем новую запись
                            ЭлементИндекса = Справочники.ЛичныеИндексыСтудентов.СоздатьЭлемент();
                            ЭлементИндекса.Наименование = ЛичныйИндекс;
                            КоличествоСозданныхЗаписей = КоличествоСозданныхЗаписей + 1;
                        КонецЕсли;
                        
                        // Заполняем реквизиты
                        ЭлементИндекса.Студент = СсылкаНаСтудента;
                        
                        // Записываем изменения
                        ЭлементИндекса.Записать();
                        КоличествоОбработанных = КоличествоОбработанных + 1;
                        
                        Сообщить("Обработан личный индекс для студента: " + ФИОСтудента + " (индекс № " + ЛичныйИндекс + ")");
                        
                    Исключение
                        ТекстОшибки = "Ошибка при обработке студента " + ?(ЗначениеЗаполнено(ФИОСтудента), ФИОСтудента, "неизвестен") + ": " + ОписаниеОшибки();
                        Сообщить(ТекстОшибки);
                    КонецПопытки;
                КонецЦикла;
                
            Исключение
                ТекстОшибки = "Ошибка при обработке группы: " + ОписаниеОшибки();
                Сообщить(ТекстОшибки);
            КонецПопытки;
        КонецЦикла;
        
        Результат.Успех = Истина;
        Результат.КоличествоОбработанных = КоличествоОбработанных;
        Результат.КоличествоСозданныхЗаписей = КоличествоСозданныхЗаписей;
        
    Исключение
        Результат.ТекстОшибки = "Общая ошибка при загрузке: " + ОписаниеОшибки();
    КонецПопытки;
    
    Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьЛичныеИндексыСтудентов(Команда)
    Если НЕ ЗначениеЗаполнено(ЗагрузкаJSON) Тогда
        Сообщить("Необходимо выбрать JSON файл для загрузки!");
        Возврат;
    КонецЕсли;
    
    Попытка
        ФайлДляРаботы = Новый ТекстовыйДокумент;
        ФайлДляРаботы.Прочитать(ЗагрузкаJSON, КодировкаТекста.UTF8);
        СодержимоеФайла = ФайлДляРаботы.ПолучитьТекст();
        
        РезультатЗагрузки = ЗагрузитьЛичныеИндексыСтудентовНаСервере(СодержимоеФайла);
        
        Если РезультатЗагрузки.Успех Тогда
            Сообщить("Загрузка завершена успешно! Обработано студентов: " + РезультатЗагрузки.КоличествоОбработанных + 
                     ", создано новых записей: " + РезультатЗагрузки.КоличествоСозданныхЗаписей);
        Иначе
            Сообщить("Ошибка при загрузке: " + РезультатЗагрузки.ТекстОшибки);
        КонецЕсли;
        
    Исключение
        Сообщить("Ошибка при чтении файла: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры




 //Заполнение справочника "Дисциплины"
&НаСервере
Функция ЗагрузитьДисциплиныНаСервере(СодержимоеJSON)
    
    РезультатФункции = Новый Структура;
    РезультатФункции.Вставить("Успех", Ложь);
    РезультатФункции.Вставить("ТекстОшибки", "");
    РезультатФункции.Вставить("КоличествоОбработанных", 0);
    РезультатФункции.Вставить("КоличествоСозданныхЗаписей", 0);
    
    Попытка
        // Проверка входных данных
        Если НЕ ЗначениеЗаполнено(СодержимоеJSON) Тогда
            РезультатФункции.ТекстОшибки = "Содержимое JSON файла пустое";
            Возврат РезультатФункции;
        КонецЕсли;
        
        // Парсинг JSON
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(СодержимоеJSON);
        ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
        ЧтениеJSON.Закрыть();
        
        Если ДанныеJSON = Неопределено Тогда
            РезультатФункции.ТекстОшибки = "Не удалось распарсить JSON файл";
            Возврат РезультатФункции;
        КонецЕсли;
        
        // Проверка наличия массива debts
        Если НЕ ДанныеJSON.Свойство("debts") Тогда
            РезультатФункции.ТекстОшибки = "В JSON файле не найден массив 'debts'";
            Возврат РезультатФункции;
        КонецЕсли;
        
        МассивЗадолженностей = ДанныеJSON.debts;
        КоличествоОбработанных = 0;
        КоличествоСозданныхЗаписей = 0;
        УжеОбработанныеДисциплины = Новый Соответствие;
        
        Для каждого Задолженность Из МассивЗадолженностей Цикл
            Попытка
                Если НЕ Задолженность.Свойство("result") Тогда
                    Продолжить;
                КонецЕсли;
                
                МассивРезультатов = Задолженность.result;
                
                Для каждого РезультатЗадолженности Из МассивРезультатов Цикл
                    Попытка
                        // Проверяем обязательные поля
                        Если НЕ РезультатЗадолженности.Свойство("area") ИЛИ НЕ ЗначениеЗаполнено(РезультатЗадолженности.area) Тогда
                            Продолжить;
                        КонецЕсли;
                        
                        Если НЕ РезультатЗадолженности.Свойство("form") ИЛИ НЕ ЗначениеЗаполнено(РезультатЗадолженности.form) Тогда
                            Продолжить;
                        КонецЕсли;
                        
                        // Получаем данные дисциплины
                        НаименованиеДисциплины = СокрЛП(РезультатЗадолженности.area);
                        ФормаКонтроля = СокрЛП(РезультатЗадолженности.form);
                        
                        // Формируем ключ для проверки дублирования
                        КлючДисциплины = НаименованиеДисциплины + "|" + ФормаКонтроля;
                        
                        // Проверяем, не обрабатывали ли мы уже эту дисциплину
                        Если УжеОбработанныеДисциплины.Получить(КлючДисциплины) <> Неопределено Тогда
                            Продолжить;
                        КонецЕсли;
                        
                        // Получаем ссылку на форму контроля
                        СсылкаНаФормуКонтроля = НайтиФормуКонтроля(ФормаКонтроля);
                        
                        // Логируем сопоставление
                        Сообщить("Сопоставление формы контроля: " + ФормаКонтроля + " -> " + СсылкаНаФормуКонтроля);                        
                        
                        // Проверяем существование записи дисциплины
                        ЭлементДисциплины = Неопределено;
                        
                        // Поиск по наименованию и форме контроля
                        Запрос = Новый Запрос;
                        Запрос.Текст = 
                        "ВЫБРАТЬ
                        |    Дисциплины.Ссылка
                        |ИЗ
                        |    Справочник.Дисциплины КАК Дисциплины
                        |ГДЕ
                        |    Дисциплины.Наименование = &НаименованиеДисциплины
                        |    И Дисциплины.ФормаКонтроля = &ФормаКонтроля";
                        
                        Запрос.УстановитьПараметр("НаименованиеДисциплины", НаименованиеДисциплины);
                        Запрос.УстановитьПараметр("ФормаКонтроля", СсылкаНаФормуКонтроля);
                        
                        РезультатЗапроса = Запрос.Выполнить();
                        
                        Если НЕ РезультатЗапроса.Пустой() Тогда
                            // Запись уже существует
                            Выборка = РезультатЗапроса.Выбрать();
                            Выборка.Следующий();
                            ЭлементДисциплины = Выборка.Ссылка.ПолучитьОбъект();
                        Иначе
                            // Создаем новую запись
                            ЭлементДисциплины = Справочники.Дисциплины.СоздатьЭлемент();
                            ЭлементДисциплины.Наименование = НаименованиеДисциплины;
                            КоличествоСозданныхЗаписей = КоличествоСозданныхЗаписей + 1;
                        КонецЕсли;
                        
                        // Заполняем реквизиты
                        ЭлементДисциплины.ФормаКонтроля = СсылкаНаФормуКонтроля;
                                                                       
                        // Записываем изменения
                        ЭлементДисциплины.Записать();
                        УжеОбработанныеДисциплины.Вставить(КлючДисциплины, Истина);
                        КоличествоОбработанных = КоличествоОбработанных + 1;
                        
                        Сообщить("Обработана дисциплина: " + НаименованиеДисциплины + " (форма контроля: " + ФормаКонтроля + ")");
                        
                    Исключение
                        ТекстОшибки = "Ошибка при обработке дисциплины " + ?(ЗначениеЗаполнено(НаименованиеДисциплины), НаименованиеДисциплины, "неизвестна") + 
                                     " (форма контроля: " + ?(ЗначениеЗаполнено(ФормаКонтроля), ФормаКонтроля, "не указана") + "): " + ОписаниеОшибки();
                        Сообщить(ТекстОшибки);
                    КонецПопытки;
                КонецЦикла;
                
            Исключение
                ТекстОшибки = "Ошибка при обработке задолженности студента: " + ОписаниеОшибки();
                Сообщить(ТекстОшибки);
            КонецПопытки;
        КонецЦикла;
        
        РезультатФункции.Успех = Истина;
        РезультатФункции.КоличествоОбработанных = КоличествоОбработанных;
        РезультатФункции.КоличествоСозданныхЗаписей = КоличествоСозданныхЗаписей;
        
    Исключение
        РезультатФункции.ТекстОшибки = "Общая ошибка при загрузке: " + ОписаниеОшибки();
    КонецПопытки;
    
    Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДисциплины(Команда)
    Если НЕ ЗначениеЗаполнено(ЗагрузкаJSON) Тогда
        Сообщить("Необходимо выбрать JSON файл для загрузки!");
        Возврат;
    КонецЕсли;
    
    Попытка
        ФайлДляРаботы = Новый ТекстовыйДокумент;
        ФайлДляРаботы.Прочитать(ЗагрузкаJSON, КодировкаТекста.UTF8);
        СодержимоеФайла = ФайлДляРаботы.ПолучитьТекст();
        
        РезультатЗагрузки = ЗагрузитьДисциплиныНаСервере(СодержимоеФайла);
        
        Если РезультатЗагрузки.Успех Тогда
            Сообщить("Загрузка завершена успешно! Обработано дисциплин: " + РезультатЗагрузки.КоличествоОбработанных + 
                     ", создано новых записей: " + РезультатЗагрузки.КоличествоСозданныхЗаписей);
        Иначе
            Сообщить("Ошибка при загрузке: " + РезультатЗагрузки.ТекстОшибки);
        КонецЕсли;
        
    Исключение
        Сообщить("Ошибка при чтении файла: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры

&НаСервере
Функция НайтиФормуКонтроля(НаименованиеФормы)
    // Приводим к стандартным значениям
    НаименованиеФормы = СокрЛП(НаименованиеФормы);
    
    // Полное соответствие значений из JSON с элементами перечисления
    СоответствиеФорм = Новый Соответствие;
    СоответствиеФорм.Вставить("экзамен", Перечисления.ФормаКонтроля.Экзамен);
    СоответствиеФорм.Вставить("зачет", Перечисления.ФормаКонтроля.Зачет);
    СоответствиеФорм.Вставить("зачет с оценкой", Перечисления.ФормаКонтроля.ЗачетСОценкой);
    СоответствиеФорм.Вставить("курсовая", Перечисления.ФормаКонтроля.Курсовая);
    СоответствиеФорм.Вставить("практика", Перечисления.ФормаКонтроля.Практика);
    СоответствиеФорм.Вставить("рейтинговая работа (брс)", Перечисления.ФормаКонтроля.РейтинговаяРаботаБРС);
    СоответствиеФорм.Вставить("реферат (брс)", Перечисления.ФормаКонтроля.РефератБРС);
    СоответствиеФорм.Вставить("групповой проект (брс)", Перечисления.ФормаКонтроля.ГрупповойПроектБРС);
    СоответствиеФорм.Вставить("домашнее творческое задание (брс)", Перечисления.ФормаКонтроля.ДомашнееТворческоеЗаданиеБРС);
    СоответствиеФорм.Вставить("контрольная работа (брс)", Перечисления.ФормаКонтроля.КонтрольнаяРаботаБРС);
    СоответствиеФорм.Вставить("расчетно-аналитическое задание (брс)", Перечисления.ФормаКонтроля.РасчетноАналитическоеЗаданиеБРС);
    
    // Нормализация входящего значения (удаляем лишние пробелы и приводим к нижнему регистру)
    НормализованноеЗначение = НРег(СокрЛП(НаименованиеФормы));
    
    // 1. Пытаемся найти точное соответствие
    Если СоответствиеФорм.Получить(НормализованноеЗначение) <> Неопределено Тогда
        Возврат СоответствиеФорм.Получить(НормализованноеЗначение);
    КонецЕсли;
    
    // 2. Ищем частичное совпадение без учета скобок и других незначимых символов
    Для Каждого КлючИЗначение Из СоответствиеФорм Цикл
        ТекущийКлюч = КлючИЗначение.Ключ;
        // Удаляем скобки и текст в них для сравнения
        КлючБезСкобок = СтрЗаменить(ТекущийКлюч, "(", "");
        КлючБезСкобок = СтрЗаменить(КлючБезСкобок, ")", "");
        КлючБезСкобок = СокрЛП(КлючБезСкобок);
        
        Если СтрНайти(НормализованноеЗначение, КлючБезСкобок) > 0 Тогда
            Возврат КлючИЗначение.Значение;
        КонецЕсли;
    КонецЦикла;
    
    // 3. Ищем по ключевым словам
    КлючевыеСлова = Новый Соответствие;
    КлючевыеСлова.Вставить("экзамен", Перечисления.ФормаКонтроля.Экзамен);
    КлючевыеСлова.Вставить("зачет", Перечисления.ФормаКонтроля.Зачет);
    КлючевыеСлова.Вставить("курсовая", Перечисления.ФормаКонтроля.Курсовая);
    КлючевыеСлова.Вставить("практика", Перечисления.ФормаКонтроля.Практика);
    КлючевыеСлова.Вставить("рейтинговая", Перечисления.ФормаКонтроля.РейтинговаяРаботаБРС);
    КлючевыеСлова.Вставить("реферат", Перечисления.ФормаКонтроля.РефератБРС);
    КлючевыеСлова.Вставить("групповой", Перечисления.ФормаКонтроля.ГрупповойПроектБРС);
    КлючевыеСлова.Вставить("творческое", Перечисления.ФормаКонтроля.ДомашнееТворческоеЗаданиеБРС);
    КлючевыеСлова.Вставить("контрольная", Перечисления.ФормаКонтроля.КонтрольнаяРаботаБРС);
    КлючевыеСлова.Вставить("расчетно", Перечисления.ФормаКонтроля.РасчетноАналитическоеЗаданиеБРС);
    
    Для Каждого КлючИЗначение Из КлючевыеСлова Цикл
        Если СтрНайти(НормализованноеЗначение, КлючИЗначение.Ключ) > 0 Тогда
            Возврат КлючИЗначение.Значение;
        КонецЕсли;
    КонецЦикла;
    
    // Если ничего не нашли, возвращаем значение по умолчанию и логируем
    Сообщить("Не удалось определить форму контроля для значения: " + НаименованиеФормы + ". Установлено значение по умолчанию 'Экзамен'");
    Возврат Перечисления.ФормаКонтроля.Экзамен;
КонецФункции



//Заполнение и Обновление документа "АкадемическаяНеуспеваемость"  
&НаСервере
Функция ЗагрузитьАкадемическуюНеуспеваемостьНаСервере(СодержимоеJSON)
    
    РезультатФункции = Новый Структура;
    РезультатФункции.Вставить("Успех", Ложь);
    РезультатФункции.Вставить("ТекстОшибки", "");
    РезультатФункции.Вставить("КоличествоОбработанных", 0);
    РезультатФункции.Вставить("КоличествоПерезаписанныхДокументов", 0);
    РезультатФункции.Вставить("КоличествоСозданныхДокументов", 0);
    
    Попытка
        // Проверка входных данных
        Если НЕ ЗначениеЗаполнено(СодержимоеJSON) Тогда
            РезультатФункции.ТекстОшибки = "Содержимое JSON файла пустое";
            Возврат РезультатФункции;
        КонецЕсли;
        
        // Парсинг JSON
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(СодержимоеJSON);
        ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
        ЧтениеJSON.Закрыть();
        
        Если ДанныеJSON = Неопределено Тогда
            РезультатФункции.ТекстОшибки = "Не удалось распарсить JSON файл";
            Возврат РезультатФункции;
        КонецЕсли;
        
        // Проверка наличия массива debts
        Если НЕ ДанныеJSON.Свойство("debts") Тогда
            РезультатФункции.ТекстОшибки = "В JSON файле не найден массив 'debts'";
            Возврат РезультатФункции;
        КонецЕсли;
        
        МассивЗадолженностей = ДанныеJSON.debts;
        КоличествоОбработанных = 0;
        КоличествоПерезаписанныхДокументов = 0;
        КоличествоСозданныхДокументов = 0;
        
        // Устанавливаем диапазон дат для документов
        НачальнаяДата = Дата(2025, 4, 25); // 25.04.2025
        КонечнаяДата = Дата(2025, 5, 30);  // 30.05.2025
        ДнейВДиапазоне = КонечнаяДата - НачальнаяДата;
        
        // Инициализируем генератор случайных чисел
        ГСЧ = Новый ГенераторСлучайныхЧисел;
        
        // Сначала найдем и исправим существующие документы
        Для каждого Задолженность Из МассивЗадолженностей Цикл
            Попытка
                // Проверяем наличие данных о студенте
                Если НЕ Задолженность.Свойство("student") ИЛИ НЕ ЗначениеЗаполнено(Задолженность.student) Тогда
                    Сообщить("Не указан индекс студента");
                    Продолжить;
                КонецЕсли;
                
                ИндексСтудента = Число(Задолженность.student);
                
                // Ищем существующий документ для этого студента
                Запрос = Новый Запрос;
                Запрос.Текст = 
                "ВЫБРАТЬ
                |    АкадемическаяНеуспеваемость.Ссылка
                |ИЗ
                |    Документ.АкадемическаяНеуспеваемость КАК АкадемическаяНеуспеваемость
                |ГДЕ
                |    АкадемическаяНеуспеваемость.ИндексСтудента = &ИндексСтудента";
                
                Запрос.УстановитьПараметр("ИндексСтудента", ИндексСтудента);
                РезультатЗапроса = Запрос.Выполнить();
                
                Если НЕ РезультатЗапроса.Пустой() Тогда
                    // Найден существующий документ - перезаписываем его
                    Выборка = РезультатЗапроса.Выбрать();
                    Выборка.Следующий();
                    Документ = Выборка.Ссылка.ПолучитьОбъект();
                    
                    // Очищаем табличную часть
                    Документ.ХарактеристикаСтудента.Очистить();
                    
                    // Заполняем заново
                    Если Задолженность.Свойство("result") Тогда
                        МассивРезультатов = Задолженность.result;
                        Для каждого Результат Из МассивРезультатов Цикл
                            Попытка
                                // Проверяем обязательные поля
                                Если НЕ Результат.Свойство("area") ИЛИ НЕ ЗначениеЗаполнено(Результат.area) Тогда
                                    Продолжить;
                                КонецЕсли;
                                
                                Если НЕ Результат.Свойство("semester") ИЛИ НЕ ЗначениеЗаполнено(Результат.semester) Тогда
                                    Продолжить;
                                КонецЕсли;
                                
                                Если НЕ Результат.Свойство("form") ИЛИ НЕ ЗначениеЗаполнено(Результат.form) Тогда
                                    Продолжить;
                                КонецЕсли;
                                
                                // Получаем данные дисциплины
                                НаименованиеДисциплины = СокрЛП(Результат.area);
                                ФормаКонтроля = СокрЛП(Результат.form);
                                
                                // Получаем ссылку на форму контроля
                                СсылкаНаФормуКонтроля = НайтиФормуКонтроля(ФормаКонтроля);
                                Если СсылкаНаФормуКонтроля = Неопределено Тогда
                                    Сообщить("Не найдена форма контроля: " + ФормаКонтроля);
                                    Продолжить;
                                КонецЕсли;
                                
                                // Ищем дисциплину
                                Запрос = Новый Запрос;
                                Запрос.Текст = 
                                "ВЫБРАТЬ
                                |    Дисциплины.Ссылка
                                |ИЗ
                                |    Справочник.Дисциплины КАК Дисциплины
                                |ГДЕ
                                |    Дисциплины.Наименование = &НаименованиеДисциплины
                                |    И Дисциплины.ФормаКонтроля = &ФормаКонтроля";
                                
                                Запрос.УстановитьПараметр("НаименованиеДисциплины", НаименованиеДисциплины);
                                Запрос.УстановитьПараметр("ФормаКонтроля", СсылкаНаФормуКонтроля);
                                РезультатЗапросаДисциплины = Запрос.Выполнить();
                                
                                Если РезультатЗапросаДисциплины.Пустой() Тогда
                                    Сообщить("Не найдена дисциплина: " + НаименованиеДисциплины + " с формой контроля " + ФормаКонтроля);
                                    Продолжить;
                                КонецЕсли;
                                
                                ВыборкаДисциплины = РезультатЗапросаДисциплины.Выбрать();
                                ВыборкаДисциплины.Следующий();
                                СсылкаНаДисциплину = ВыборкаДисциплины.Ссылка;
                                
                                // Получаем семестр
                                Семестр = ПолучитьСеместрПоНомеру(Результат.semester);
                                Если Семестр = Неопределено Тогда
                                    Сообщить("Неизвестный номер семестра: " + Результат.semester);
                                    Продолжить;
                                КонецЕсли;
                                
                                // Получаем причину задолженности
                                Причина = Неопределено;
                                Если Результат.Свойство("grade") И ЗначениеЗаполнено(Результат.grade) Тогда
                                    Причина = НайтиПричинуЗадолженности(Результат.grade);
								Иначе 
									Причина = Перечисления.ПричинаВозникновенияЗадолженности.ДругаяПричина;
                                КонецЕсли;
                                
                                // Добавляем строку в табличную часть
                                СтрокаТЧ = Документ.ХарактеристикаСтудента.Добавить();
                                СтрокаТЧ.Дисциплина = СсылкаНаДисциплину;
                                СтрокаТЧ.Семестр = Семестр;
                                СтрокаТЧ.ФормаКонтроля = СсылкаНаФормуКонтроля;
								СтрокаТЧ.ПричинаВозникновенияЗадолженности = Причина;
                                
                                Если Причина <> Неопределено Тогда
                                    СтрокаТЧ.ПричинаВозникновенияЗадолженности = Причина;
                                КонецЕсли;
                                
                                КоличествоОбработанных = КоличествоОбработанных + 1;
                                
                            Исключение
                                ТекстОшибки = "Ошибка при обработке результата: " + ОписаниеОшибки();
                                Сообщить(ТекстОшибки);
                            КонецПопытки;
                        КонецЦикла;
                        
                        // Проверяем, есть ли строки в табличной части
                        Если Документ.ХарактеристикаСтудента.Количество() = 0 Тогда
                            Сообщить("Нет корректных данных для перезаписи документа для студента " + Задолженность.student);
                            Продолжить;
                        КонецЕсли;
                        
                        // Записываем документ
                        Документ.Записать();
                        КоличествоПерезаписанныхДокументов = КоличествоПерезаписанныхДокументов + 1;
                        Сообщить("Перезаписан документ для студента " + Задолженность.student);
                    КонецЕсли;
                Иначе
                    // Документ не найден - создаем новый
                    Если Задолженность.Свойство("result") Тогда
                        Документ = Документы.АкадемическаяНеуспеваемость.СоздатьДокумент();
                        Документ.ИндексСтудента = ИндексСтудента;
                        
                        // Устанавливаем случайную дату в заданном диапазоне
                        Если ДнейВДиапазоне > 0 Тогда
                            СлучайноеЧислоДней = ГСЧ.СлучайноеЧисло(0, ДнейВДиапазоне);
                            Документ.Дата = НачальнаяДата + СлучайноеЧислоДней;
                        Иначе
                            Документ.Дата = НачальнаяДата;
                        КонецЕсли;
                        
                        МассивРезультатов = Задолженность.result;
                        Для каждого Результат Из МассивРезультатов Цикл
                            Попытка
                                // Проверяем обязательные поля
                                Если НЕ Результат.Свойство("area") ИЛИ НЕ ЗначениеЗаполнено(Результат.area) Тогда
                                    Продолжить;
                                КонецЕсли;
                                
                                Если НЕ Результат.Свойство("semester") ИЛИ НЕ ЗначениеЗаполнено(Результат.semester) Тогда
                                    Продолжить;
                                КонецЕсли;
                                
                                Если НЕ Результат.Свойство("form") ИЛИ НЕ ЗначениеЗаполнено(Результат.form) Тогда
                                    Продолжить;
                                КонецЕсли;
                                
                                // Получаем данные дисциплины
                                НаименованиеДисциплины = СокрЛП(Результат.area);
                                ФормаКонтроля = СокрЛП(Результат.form);
                                
                                // Получаем ссылку на форму контроля
                                СсылкаНаФормуКонтроля = НайтиФормуКонтроля(ФормаКонтроля);
                                Если СсылкаНаФормуКонтроля = Неопределено Тогда
                                    Сообщить("Не найдена форма контроля: " + ФормаКонтроля);
                                    Продолжить;
                                КонецЕсли;
                                
                                // Ищем дисциплину
                                Запрос = Новый Запрос;
                                Запрос.Текст = 
                                "ВЫБРАТЬ
                                |    Дисциплины.Ссылка
                                |ИЗ
                                |    Справочник.Дисциплины КАК Дисциплины
                                |ГДЕ
                                |    Дисциплины.Наименование = &НаименованиеДисциплины
                                |    И Дисциплины.ФормаКонтроля = &ФормаКонтроля";
                                
                                Запрос.УстановитьПараметр("НаименованиеДисциплины", НаименованиеДисциплины);
                                Запрос.УстановитьПараметр("ФормаКонтроля", СсылкаНаФормуКонтроля);
                                РезультатЗапросаДисциплины = Запрос.Выполнить();
                                
                                Если РезультатЗапросаДисциплины.Пустой() Тогда
                                    Сообщить("Не найдена дисциплина: " + НаименованиеДисциплины + " с формой контроля " + ФормаКонтроля);
                                    Продолжить;
                                КонецЕсли;
                                
                                ВыборкаДисциплины = РезультатЗапросаДисциплины.Выбрать();
                                ВыборкаДисциплины.Следующий();
                                СсылкаНаДисциплину = ВыборкаДисциплины.Ссылка;
                                
                                // Получаем семестр
                                Семестр = ПолучитьСеместрПоНомеру(Результат.semester);
                                Если Семестр = Неопределено Тогда
                                    Сообщить("Неизвестный номер семестра: " + Результат.semester);
                                    Продолжить;
                                КонецЕсли;
                                
                                // Получаем причину задолженности
                                Причина = Неопределено;
                                Если Результат.Свойство("grade") И ЗначениеЗаполнено(Результат.grade) Тогда
                                    Причина = НайтиПричинуЗадолженности(Результат.grade);
								Иначе
									Причина = Перечисления.ПричинаВозникновенияЗадолженности.ДругаяПричина;
                                КонецЕсли;
                                
                                // Добавляем строку в табличную часть
                                СтрокаТЧ = Документ.ХарактеристикаСтудента.Добавить();
                                СтрокаТЧ.Дисциплина = СсылкаНаДисциплину;
                                СтрокаТЧ.Семестр = Семестр;
                                СтрокаТЧ.ФормаКонтроля = СсылкаНаФормуКонтроля;
                                СтрокаТЧ.ПричинаВозникновенияЗадолженности = Причина;

                                Если Причина <> Неопределено Тогда
                                    СтрокаТЧ.ПричинаВозникновенияЗадолженности = Причина;
                                КонецЕсли;
                                
                                КоличествоОбработанных = КоличествоОбработанных + 1;
                                
                            Исключение
                                ТекстОшибки = "Ошибка при обработке результата: " + ОписаниеОшибки();
                                Сообщить(ТекстОшибки);
                            КонецПопытки;
                        КонецЦикла;
                        
                        // Проверяем, есть ли строки в табличной части
                        Если Документ.ХарактеристикаСтудента.Количество() = 0 Тогда
                            Сообщить("Нет корректных данных для создания документа для студента " + Задолженность.student);
                            Продолжить;
                        КонецЕсли;
                        
                        // Записываем документ
                        Документ.Записать();
                        КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
                        Сообщить("Создан новый документ для студента " + Задолженность.student + " с датой " + Формат(Документ.Дата, "ДФ=dd.MM.yyyy"));
                    КонецЕсли;
                КонецЕсли;
                
            Исключение
                ТекстОшибки = "Ошибка при обработке студента " + ?(ЗначениеЗаполнено(Задолженность.student), Задолженность.student, "неизвестен") + ": " + ОписаниеОшибки();
                Сообщить(ТекстОшибки);
            КонецПопытки;
        КонецЦикла;
        
        РезультатФункции.Успех = Истина;
        РезультатФункции.КоличествоОбработанных = КоличествоОбработанных;
        РезультатФункции.КоличествоПерезаписанныхДокументов = КоличествоПерезаписанныхДокументов;
        РезультатФункции.КоличествоСозданныхДокументов = КоличествоСозданныхДокументов;
        
    Исключение
        РезультатФункции.ТекстОшибки = "Общая ошибка при загрузке: " + ОписаниеОшибки();
    КонецПопытки;
    
    Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция НайтиПричинуЗадолженности(НаименованиеПричины)
    НаименованиеПричины = СокрЛП(НаименованиеПричины);
	Если НЕ ЗначениеЗаполнено(НаименованиеПричины) Тогда
		Возврат Перечисления.ПричинаВозникновенияЗадолженности.ДругаяПричина;
	КонецЕсли;
		
    Соответствие = Новый Соответствие;
    Соответствие.Вставить("неявка", Перечисления.ПричинаВозникновенияЗадолженности.Неявка);
    Соответствие.Вставить("незачет", Перечисления.ПричинаВозникновенияЗадолженности.Незачет);
    Соответствие.Вставить("неудовлетворительно", Перечисления.ПричинаВозникновенияЗадолженности.Неудовлетворительно);
    Соответствие.Вставить("не допущен", Перечисления.ПричинаВозникновенияЗадолженности.НеДопущен);
  
    Ключ = НРег(НаименованиеПричины);
    Если Соответствие.Получить(Ключ) <> Неопределено Тогда
        Возврат Соответствие.Получить(Ключ);
    КонецЕсли;
    
    Возврат Перечисления.ПричинаВозникновенияЗадолженности.ДругаяПричина;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьАкадемическуюНеуспеваемость(Команда)
    Если НЕ ЗначениеЗаполнено(ЗагрузкаJSON) Тогда
        Сообщить("Необходимо выбрать JSON файл для загрузки!");
        Возврат;
    КонецЕсли;
    
    Попытка
        ФайлДляРаботы = Новый ТекстовыйДокумент;
        ФайлДляРаботы.Прочитать(ЗагрузкаJSON, КодировкаТекста.UTF8);
        СодержимоеФайла = ФайлДляРаботы.ПолучитьТекст();
        
        РезультатЗагрузки = ЗагрузитьАкадемическуюНеуспеваемостьНаСервере(СодержимоеФайла);
        
        Если РезультатЗагрузки.Успех Тогда
            Сообщить("Перезапись завершена успешно! Обработано записей: " + РезультатЗагрузки.КоличествоОбработанных + 
                     ", перезаписано документов: " + РезультатЗагрузки.КоличествоПерезаписанныхДокументов +
                     ", создано новых документов: " + РезультатЗагрузки.КоличествоСозданныхДокументов);
        Иначе
            Сообщить("Ошибка при перезаписи: " + РезультатЗагрузки.ТекстОшибки);
        КонецЕсли;
        
    Исключение
        Сообщить("Ошибка при чтении файла: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры