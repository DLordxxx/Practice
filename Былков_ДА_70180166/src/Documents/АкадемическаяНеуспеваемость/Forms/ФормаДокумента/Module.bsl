
&НаКлиенте
Процедура ИндексСтудентаПриИзменении(Элемент)
	ПроверитьНаличиеДокументаДляСтудентаНаКлиенте(Объект.ИндексСтудента);
    	
	КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеДокументаДляСтудентаНаКлиенте(ИндексСтудента)
    Если Не ЗначениеЗаполнено(ИндексСтудента) Тогда
        Возврат;
    КонецЕсли;
    
    ЕстьДокумент = ЕстьПроведенныйДокументДляСтудентаНаСервере(ИндексСтудента);
    
    Если ЕстьДокумент Тогда  
        Объект.ИндексСтудента = Неопределено;
        ВызватьИсключение("Для данного студента уже существует проведенный документ 'Академическая неуспеваемость'!");
    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЕстьПроведенныйДокументДляСтудентаНаСервере(ИндексСтудента)
    Если Не ЗначениеЗаполнено(ИндексСтудента) Тогда
        Возврат Ложь;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    АкадемическаяНеуспеваемость.Ссылка
    |ИЗ
    |    Документ.АкадемическаяНеуспеваемость КАК АкадемическаяНеуспеваемость
    |ГДЕ
    |    АкадемическаяНеуспеваемость.ИндексСтудента = &ИндексСтудента
    |    И АкадемическаяНеуспеваемость.Проведен = Истина
    |    И АкадемическаяНеуспеваемость.Ссылка <> &ТекущийДокумент";
    
    Запрос.УстановитьПараметр("ИндексСтудента", ИндексСтудента);
    Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Ссылка);
    Результат = Запрос.Выполнить();
    
    Возврат Результат.Выбрать().Следующий();
КонецФункции

&НаСервере
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    // Проверка уникальности индекса студента
    ПроверитьУникальностьИндексаСтудента(Отказ, Объект.ИндексСтудента, Объект.Ссылка);
    Если Отказ Тогда
        Возврат;
	КонецЕсли;
    
    // Проверка на существование проведенного документа для студента
    Если ЕстьПроведенныйДокументДляСтудентаНаСервере(Объект.ИндексСтудента) Тогда
        Отказ = Истина;
        ВызватьИсключение("Невозможно записать документ: для студента с индексом «" + 
                         Объект.ИндексСтудента + "» уже существует проведенный документ!");
        Возврат;
	КонецЕсли;
	
		  // Проверяем наличие записей в табличной части
    Если Элементы.ХарактеристикаСтудента.Количество() = 0 Тогда
            ВызватьИсключение ("У студента отсутствуют академические задолженности!");
    КонецЕсли;    
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтудента(СсылкаНаСтудента)
    Если Не ЗначениеЗаполнено(СсылкаНаСтудента) Тогда
        Возврат Неопределено;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   Студенты.ЛичныйИндекс КАК ЛичныйИндекс
    |ИЗ
    |   Справочник.Студенты КАК Студенты
    |ГДЕ
    |   Студенты.Ссылка = &СсылкаНаСтудента";
    
    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка;
    Иначе
        Возврат Неопределено;
    КонецЕсли;
КонецФункции

&НаСервере
Процедура ПроверитьУникальностьИндексаСтудента(Отказ, ИндексСтудента, Ссылка)
    Если Не ЗначениеЗаполнено(ИндексСтудента) Тогда
        Отказ = Истина;
        ВызватьИсключение("Не указан индекс студента!");
        Возврат;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |    АкадемическаяНеуспеваемость.Ссылка
    |ИЗ
    |    Документ.АкадемическаяНеуспеваемость КАК АкадемическаяНеуспеваемость
    |ГДЕ
    |    АкадемическаяНеуспеваемость.ИндексСтудента = &ИндексСтудента
    |    И АкадемическаяНеуспеваемость.Ссылка <> &Ссылка";
    
    Запрос.УстановитьПараметр("ИндексСтудента", ИндексСтудента);
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Выбрать().Следующий() Тогда
        Отказ = Истина;
        ВызватьИсключение("Документ с таким индексом студента уже существует!");
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаСтудентаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	 // Запрещаем ручное добавление строк в табличную часть
    Отказ = Истина;
	ПоказатьПредупреждение(, "Добавление строк вручную запрещено! Строки заполняются автоматически через загрузку JSON-файла!");
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаСтудентаПередУдалением(Элемент, Отказ)
 // Запрещаем удаление строк из табличной части
    Отказ = Истина;
    ПоказатьПредупреждение(, "Удаление строк запрещено! Для изменения состава задолженностей заполните данные через JSON-файл!");
КонецПроцедуры
