&НаСервере
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
    Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриказОНазначенииКомиссииПоЛиквидацииЗадолженностей") Тогда
        // Получаем объект приказа
        Приказ = ДанныеЗаполнения.ПолучитьОбъект();
        
        // Проверяем тип документа-основания
        Если Не Приказ.ДокументОснование.Метаданные().Имя = "ИндивидуальныйПланЛиквидацииЗадолженностей" Тогда
            ВызватьИсключение "Для данной ведомости документом-основанием должен быть «Индивидуальный план ликвидации задолженностей»!";
        КонецЕсли;
        
        // Заполняем реквизиты шапки документа
        ЭтотОбъект.Студент = Приказ.Студент;
        ЭтотОбъект.Преподаватель = Приказ.Преподаватель;
        ЭтотОбъект.Дисциплина = Приказ.Дисциплина;
        ЭтотОбъект.Основание = ДанныеЗаполнения.Ссылка;
		
        // Получаем наименование контроля для данной дисциплины
        ФормаКонтроля = Неопределено;
        
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |    Дисциплины.ФормаКонтроля КАК ФормаКонтроля
        |ИЗ
        |    Справочник.Дисциплины КАК Дисциплины
        |ГДЕ
        |    Дисциплины.Ссылка = &Дисциплина";
        
        Запрос.УстановитьПараметр("Дисциплина", ЭтотОбъект.Дисциплина);
        Результат = Запрос.Выполнить();
        
        Если Не Результат.Пустой() Тогда
            Выборка = Результат.Выбрать();
            Если Выборка.Следующий() Тогда
                ФормаКонтроля = Выборка.ФормаКонтроля;
            КонецЕсли;
        КонецЕсли;
        
        // Заполняем наименование контроля в шапке
        Если ЗначениеЗаполнено(ФормаКонтроля) Тогда
            ЭтотОбъект.ФормаКонтроля = ФормаКонтроля;
		КонецЕсли; 
		
		// Проверка уникальности ведомости ИОМ
        ПроверитьУникальностьВедомостиИОМ(ДанныеЗаполнения.Студент, ДанныеЗаполнения.Дисциплина, "", ДанныеЗаполнения.Ссылка);
    КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура ПроверитьУникальностьВедомостиИОМ(Студент, Дисциплина, ИмяСтудента = "", ДокументОснование)
    
    // Получаем имя студента, если передан студент
    Если ЗначениеЗаполнено(Студент) Тогда
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |    Студенты.Наименование КАК Наименование
        |ИЗ
        |    Справочник.Студенты КАК Студенты
        |ГДЕ
        |    Студенты.Ссылка = &СсылкаНаСтудента";
        
        Запрос.УстановитьПараметр("СсылкаНаСтудента", Студент);
        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
        
        Если Выборка.Следующий() Тогда
            ИмяСтудента = Выборка.Наименование;
        КонецЕсли;
	КонецЕсли;
	
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.Ссылка КАК Ссылка,
    |    ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.Дата КАК Дата,
    |    ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.Номер КАК Номер,
    |    ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.Основание КАК Основание
    |ИЗ
    |    Документ.ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ КАК ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ
    |ГДЕ
    |    ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.Студент = &Студент
    |    И ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.Дисциплина = &Дисциплина
    |    И ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.ПометкаУдаления = ЛОЖЬ";
    
    Запрос.УстановитьПараметр("Студент", Студент);
    Запрос.УстановитьПараметр("Дисциплина", Дисциплина);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();

   Если Выборка.Количество() > 0 Тогда
            ВызватьИсключение ("Для студента «" + Студент +"» уже существует документ «Ведомость учета академических задолженностей для студентов с ИОМ» по дисциплине «"+Дисциплина+ "»!");
        КонецЕсли;
    
КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, Режим)
	
	// регистр СтатусыАкадемическихЗадолженностей
	
	Движения.СтатусыАкадемическихЗадолженностей.Записывать = Истина;
	Движение = Движения.СтатусыАкадемическихЗадолженностей.Добавить();
	Движение.Период = Дата;
	Движение.Студент = Студент;
	Движение.Дисциплина = Дисциплина;
	Движение.СтатусЗадолженности = СтатусАкадемическойЗадолженности;

	// регистр ОценкиСтудентов
	Движения.ОценкиСтудентов.Записывать = Истина;
	Движение = Движения.ОценкиСтудентов.Добавить();
	Движение.Период = Дата;
	Движение.Студент = Студент;
	Движение.Дисциплина = Дисциплина;
	Движение.ФормаКонтроля = ФормаКонтроля;
	Движение.Оценка = Оценка;
	

	// регистр УчетАкадемическихЗадолженностей
	Движения.УчетАкадемическихЗадолженностей.Записывать = Истина;
	Движение = Движения.УчетАкадемическихЗадолженностей.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Период = Дата;
	Движение.Студент = Студент;
	Движение.Дисциплина = Дисциплина;
	Движение.ФормаКонтроля = ФормаКонтроля;
    Движение.КоличествоПросроченныхЗадолженностей = 1; // Каждая ведомостьИОМ = 1 задолженность

КонецПроцедуры          


