&НаСервере
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

    Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РекомендацииПоСтудентам") Тогда
        
        Группа = ДанныеЗаполнения.Группа;
        Студент = ДанныеЗаполнения.Студент;
        ДокументОснование = ДанныеЗаполнения.Ссылка; 
        // Проверяем, что все активные задолженности прошли этап "ВтораяПопытка"
        Если Не ВсеЗадолженностиПрошлиВторуюПопытку(Студент) Тогда
            ВызватьИсключение "Невозможно создать Протокол: не все активные задолженности прошли этап второй попытки!";
        КонецЕсли; 
        // Проверяем, что все ведомости имеют рекомендации
        Если Не ВсеВедомостиИмеютРекомендации(Студент) Тогда
            ВызватьИсключение "Невозможно создать Протокол: не по всем ведомостям созданы рекомендации!";
        КонецЕсли;
        // Проверяем вторую попытку (документ ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ)
        Если ВтораяПопытка(Студент) Тогда
            // Создаем Протокол на основании Рекомендаций
            НовыйПротокол = Документы.ПротоколЗаседанияКомиссии.СоздатьДокумент();
            НовыйПротокол.ДокументОснование = ДокументОснование;
            НовыйПротокол.Студент = Студент;
            НовыйПротокол.Группа = Группа;
            
            // Заполняем остальные реквизиты
            ЗаполнитьРеквизитыПротокола(НовыйПротокол, Студент);
                        
            // Открываем форму документа на клиенте
            ПараметрыОткрытия = Новый Структура("Объект", НовыйПротокол);
		           
        ИначеЕсли ЕстьАктивныеЗадолженности(Студент) Тогда
            ВызватьИсключение "Невозможно создать Протокол заседания комиссии: у студента имеются активные академические задолженности!";
        КонецЕсли;
               
        // Получаем данные студента из справочника
        ДанныеСтудента = ПолучитьДанныеСтудента(Студент);
        
        // Заполняем семестр
        Если ДанныеСтудента.Свойство("Семестр") Тогда
            ЭтотОбъект.Семестр = ДанныеСтудента.Семестр;
        КонецЕсли;
        
        // Проверяем наличие существующих протоколов
        ПроверитьНаличиеПротокола(Студент);
                   
        // Получаем количество возникших задолженностей
        КоличествоВозникших = ПолучитьКоличествоВозникшихЗадолженностей(Студент);
        ЭтотОбъект.КоличествоВозникшихЗадолженностей = КоличествоВозникших;
        
        // Получаем количество ликвидированных задолженностей
        КоличествоЛиквидированных = ПолучитьКоличествоЛиквидированныхЗадолженностей(Студент);
        ЭтотОбъект.КоличествоЛиквидированныхЗадолженностей = КоличествоЛиквидированных;
        
        // Рассчитываем процент задолженностей
        Если КоличествоВозникших > 0 Тогда
            ПроцентЗадолженностей = (КоличествоВозникших - КоличествоЛиквидированных) / КоличествоВозникших * 100;
            ЭтотОбъект.ПроцентЗадолженностей = Окр(ПроцентЗадолженностей, 2);
        Иначе
            ЭтотОбъект.ПроцентЗадолженностей = 0;
        КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВсеВедомостиИмеютРекомендации(Студент)
    
    // Получаем все ведомости для студента
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Ведомость.Ссылка КАК Ссылка
    |ИЗ
    |    Документ.ВедомостьУчетаАкадемическихЗадолженностей КАК Ведомость
    |ГДЕ
    |    Ведомость.Студент = &Студент
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |    ВедомостьИОМ.Ссылка КАК Ссылка
    |ИЗ
    |    Документ.ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ КАК ВедомостьИОМ
    |ГДЕ
    |    ВедомостьИОМ.Студент = &Студент";
    
    Запрос.УстановитьПараметр("Студент", Студент);
    Результат = Запрос.Выполнить();
    ВыборкаВедомостей = Результат.Выбрать();
    
    // Для каждой ведомости проверяем наличие рекомендаций
    Пока ВыборкаВедомостей.Следующий() Цикл
        ЗапросРекомендаций = Новый Запрос;
        ЗапросРекомендаций.Текст = 
        "ВЫБРАТЬ
        |    Рекомендации.Ссылка КАК Ссылка
        |ИЗ
        |    Документ.РекомендацииПоСтудентам КАК Рекомендации
        |ГДЕ
        |    Рекомендации.Студент = &Студент
        |    И Рекомендации.ДокументОснование = &ДокументОснование";
        
        ЗапросРекомендаций.УстановитьПараметр("Студент", Студент);
        ЗапросРекомендаций.УстановитьПараметр("ДокументОснование", ВыборкаВедомостей.Ссылка);
        РезультатРекомендаций = ЗапросРекомендаций.Выполнить();
        
        Если РезультатРекомендаций.Пустой() Тогда
            Возврат Ложь; // Найдена ведомость без рекомендаций
        КонецЕсли;
    КонецЦикла;
    
    Возврат Истина; // Все ведомости имеют рекомендации
КонецФункции

&НаСервере
Функция ВсеЗадолженностиПрошлиВторуюПопытку(Студент)
    
    // Получаем все активные задолженности
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    ВедомостьУчетаАкадемическихЗадолженностей.Ссылка КАК Ссылка,
    |    ВедомостьУчетаАкадемическихЗадолженностей.Дисциплина КАК Дисциплина
    |ИЗ
    |    Документ.ВедомостьУчетаАкадемическихЗадолженностей КАК ВедомостьУчетаАкадемическихЗадолженностей
    |ГДЕ
    |    ВедомостьУчетаАкадемическихЗадолженностей.Студент = &Студент
    |    И ВедомостьУчетаАкадемическихЗадолженностей.СтатусАкадемическойЗадолженности = &АктивныйСтатус";
    
    Запрос.УстановитьПараметр("Студент", Студент);
    Запрос.УстановитьПараметр("АктивныйСтатус", Перечисления.НаименованиеСтатуса.Активная);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    // Для каждой активной задолженности проверяем наличие второй попытки
    Пока Выборка.Следующий() Цикл
        ЗапросПопытки = Новый Запрос;
        ЗапросПопытки.Текст = 
        "ВЫБРАТЬ
        |    ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.Ссылка КАК Ссылка
        |ИЗ
        |    Документ.ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ КАК ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ
        |ГДЕ
        |    ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.Студент = &Студент
        |    И ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.Дисциплина = &Дисциплина";
        
        ЗапросПопытки.УстановитьПараметр("Студент", Студент);
        ЗапросПопытки.УстановитьПараметр("Дисциплина", Выборка.Дисциплина);
        РезультатПопытки = ЗапросПопытки.Выполнить();
        
        Если РезультатПопытки.Пустой() Тогда
            Возврат Ложь; // Найдена активная задолженность без второй попытки
        КонецЕсли;
    КонецЦикла;
    
    Возврат Истина; // Все активные задолженности имеют вторую попытку
КонецФункции

&НаСервере
Функция ВтораяПопытка(Студент)  
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.Ссылка КАК Ссылка
    |ИЗ
    |    Документ.ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ КАК ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ
    |ГДЕ
    |    ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.Студент = &Студент
    |    И ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.ПометкаУдаления = ЛОЖЬ";
    
    Запрос.УстановитьПараметр("Студент", Студент);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Возврат Выборка.Количество() > 0;
    
КонецФункции

&НаСервере
Процедура ПроверитьНаличиеПротокола(Студент)
    
    Если ПустаяСтрока(Студент) Тогда
        ДанныеСтудента = ПолучитьДанныеСтудента(Студент);
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    ПротоколЗаседанияКомиссии.Ссылка КАК Ссылка,
    |    ПротоколЗаседанияКомиссии.Дата КАК Дата,
    |    ПротоколЗаседанияКомиссии.Номер КАК Номер
    |ИЗ
    |    Документ.ПротоколЗаседанияКомиссии КАК ПротоколЗаседанияКомиссии
    |ГДЕ
    |    ПротоколЗаседанияКомиссии.Студент = &Студент
    |    И ПротоколЗаседанияКомиссии.ПометкаУдаления = ЛОЖЬ";

    Запрос.УстановитьПараметр("Студент", Студент);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();

    Если Выборка.Количество() > 0 Тогда
       ВызватьИсключение("Для студента " + Студент + " уже существует «Протокол заседания комиссии»!");

    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПротокола(Протокол, Студент)
    
    ДанныеСтудента = ПолучитьДанныеСтудента(Студент);
    
    // Заполняем семестр
    Если ДанныеСтудента.Свойство("Семестр") Тогда
        Протокол.Семестр = ДанныеСтудента.Семестр;
    КонецЕсли;
    
    // Получаем количество задолженностей
    КоличествоВозникших = ПолучитьКоличествоВозникшихЗадолженностей(Студент);
    КоличествоЛиквидированных = ПолучитьКоличествоЛиквидированныхЗадолженностей(Студент);
    
    Протокол.КоличествоВозникшихЗадолженностей = КоличествоВозникших;
    Протокол.КоличествоЛиквидированныхЗадолженностей = КоличествоЛиквидированных;
    
    Если КоличествоВозникших > 0 Тогда
        ПроцентЗадолженностей = (КоличествоВозникших - КоличествоЛиквидированных) / КоличествоВозникших * 100;
        Протокол.ПроцентЗадолженностей = Окр(ПроцентЗадолженностей, 2);
    Иначе
        Протокол.ПроцентЗадолженностей = 0;
    КонецЕсли;
    
КонецПроцедуры
&НаСервере
Функция ЕстьАктивныеЗадолженности(Студент)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	ВедомостьУчетаАкадемическихЗадолженностей.Ссылка КАК Ссылка
    |ИЗ
    |	Документ.ВедомостьУчетаАкадемическихЗадолженностей КАК ВедомостьУчетаАкадемическихЗадолженностей
    |ГДЕ
    |	ВедомостьУчетаАкадемическихЗадолженностей.Студент = &Студент
    |	И ВедомостьУчетаАкадемическихЗадолженностей.СтатусАкадемическойЗадолженности = &АктивныйСтатус";    
    Запрос.УстановитьПараметр("Студент", Студент);
    Запрос.УстановитьПараметр("АктивныйСтатус", Перечисления.НаименованиеСтатуса.Активная);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Возврат Выборка.Количество() > 0;
    
КонецФункции 
 
&НаСервере
Функция ПолучитьДанныеСтудента(СсылкаНаСтудента) Экспорт
    Результат = Новый Структура;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.Семестр КАК Семестр,
    |    Студенты.Группа,
    |    Студенты.ФормаОбучения КАК ФормаОбучения,
    |    Студенты.Наименование КАК Наименование
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &СсылкаНаСтудента"; 

    
    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();    

    Если Выборка.Следующий() Тогда
            Результат.Вставить("Семестр", Выборка.Семестр);                         
        	Результат.Вставить("ГруппаСсылка", Выборка.Группа);    
       	 	Результат.Вставить("НаименованиеСтудента", Выборка.Наименование);
        	Результат.Вставить("ФормаОбучения", Выборка.ФормаОбучения);
    КонецЕсли;

    Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьКоличествоВозникшихЗадолженностей(Студент)
    
    КоличествоЗадолженностей = 0;
    
    // Считаем все ведомости о задолженностях
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    КОЛИЧЕСТВО(Ведомость.Ссылка) КАК Количество
    |ИЗ
    |    Документ.ВедомостьУчетаАкадемическихЗадолженностей КАК Ведомость
    |ГДЕ
    |    Ведомость.Студент = &Студент";
    
    Запрос.УстановитьПараметр("Студент", Студент);
    
    Попытка
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        Если Выборка.Следующий() Тогда
            КоличествоЗадолженностей = Выборка.Количество;
        КонецЕсли;
    Исключение
		
	КонецПопытки;
        
    Возврат ?(КоличествоЗадолженностей <> Неопределено, КоличествоЗадолженностей, 0);
КонецФункции

&НаСервере
Функция ПолучитьКоличествоЛиквидированныхЗадолженностей(Студент)
    
    КоличествоЛиквидированных = 0;
    
    // Считаем закрытые задолженности из ведомости
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    КОЛИЧЕСТВО(Ведомость.Ссылка) КАК Количество
    |ИЗ
    |    Документ.ВедомостьУчетаАкадемическихЗадолженностей КАК Ведомость
    |ГДЕ
    |    Ведомость.Студент = &Студент
    |    И Ведомость.СтатусАкадемическойЗадолженности = &СтатусЗакрыта";
    
    Запрос.УстановитьПараметр("Студент", Студент);
    Запрос.УстановитьПараметр("СтатусЗакрыта", Перечисления.НаименованиеСтатуса.Закрытая);
    
    Попытка
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        Если Выборка.Следующий() Тогда
            КоличествоЛиквидированных = Выборка.Количество;
        КонецЕсли;
    Исключение
		
	КонецПопытки;
    
    // Добавляем закрытые задолженности из ведомости для студентов с ИОМ
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    КОЛИЧЕСТВО(ВедомостьИОМ.Ссылка) КАК Количество
    |ИЗ
    |    Документ.ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ КАК ВедомостьИОМ
    |ГДЕ
    |    ВедомостьИОМ.Студент = &Студент
    |    И ВедомостьИОМ.СтатусАкадемическойЗадолженности = &СтатусЗакрыта";
    
    Запрос.УстановитьПараметр("Студент", Студент);
    Запрос.УстановитьПараметр("СтатусЗакрыта", Перечисления.НаименованиеСтатуса.Закрытая);
    
    Попытка
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        Если Выборка.Следующий() Тогда
            КоличествоЛиквидированных = КоличествоЛиквидированных + Выборка.Количество;
        КонецЕсли;
    Исключение
		
	КонецПопытки;
    
    Возврат ?(КоличествоЛиквидированных <> Неопределено, КоличествоЛиквидированных, 0);
КонецФункции

&НаСервере
Процедура ОбработкаПроведения(Отказ, Режим)
    
    // Регистр ДинамикаЛиквидацииЗадолженностей
    Движения.ДинамикаЛиквидацииЗадолженностей.Записывать = Истина;
    Движение = Движения.ДинамикаЛиквидацииЗадолженностей.Добавить();
    Движение.Период = Дата;
    Движение.Студент = ЭтотОбъект.Студент;
    Движение.Семестр = ЭтотОбъект.Семестр;
    Движение.КоличествоВозникшихЗадолженностей = ЭтотОбъект.КоличествоВозникшихЗадолженностей;
    Движение.КоличествоЛиквидированныхЗадолженностей = ЭтотОбъект.КоличествоЛиквидированныхЗадолженностей;
	
КонецПроцедуры