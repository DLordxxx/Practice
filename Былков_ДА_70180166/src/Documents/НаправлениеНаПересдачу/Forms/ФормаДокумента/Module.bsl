&НаСервере
Функция ПолучитьДисциплиныИзОснования(СсылкаНаОснование)
    
    Если СсылкаНаОснование = Неопределено Тогда
        Возврат Новый Массив;
    КонецЕсли;
    
    Если ТипЗнч(СсылкаНаОснование) <> Тип("ДокументСсылка.ИдентификацияАкадемическихЗадолженностей") Тогда
        Возврат Новый Массив;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Характеристика.Дисциплины КАК Дисциплины
    |ИЗ
    |    Документ.ИдентификацияАкадемическихЗадолженностей.Характеристика КАК Характеристика
    |ГДЕ
    |    Характеристика.Ссылка = &Основание";
    
    Запрос.УстановитьПараметр("Основание", СсылкаНаОснование);
    Результат = Запрос.Выполнить();
    
    МассивДисциплин = Новый Массив;
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        МассивДисциплин.Добавить(Выборка.Дисциплины);
    КонецЦикла;
    
    Возврат МассивДисциплин;
КонецФункции

&НаКлиенте
Процедура ДисциплинаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    СтандартнаяОбработка = Ложь;
    
    // Запрещаем выбор, если нет основания
    Если Не ЗначениеЗаполнено(Объект.Основание) Тогда
        ВызватьИсключение("Нельзя выбирать дисциплину без документа-основания!");
        Возврат;
    КонецЕсли;
    
    ПараметрыФормы = Новый Структура;
    
    // Получаем список доступных дисциплин
    МассивДисциплин = ПолучитьДисциплиныИзОснованияНаСервере();
    
    Если МассивДисциплин.Количество() = 0 Тогда
        ВызватьИсключение("В документе-основании не указаны дисциплины!");
        Возврат;
    КонецЕсли;
    
    // Создаем отбор для формы выбора по дисциплинам из основания
    ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", МассивДисциплин));
    
    ФакультетСтудента = ПолучитьФакультетСтудентаНаСервере();
    
    ПараметрыФормы.Вставить("ОтборПоРодителю", Новый Структура("Родитель", ФакультетСтудента));
    
    ФормаВыбора = ОткрытьФорму("Справочник.Дисциплины.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаСервере
Функция ПолучитьДисциплиныИзОснованияНаСервере()
    Возврат ПолучитьДисциплиныИзОснования(Объект.Основание);
КонецФункции

&НаСервере
Функция ПолучитьФакультетСтудентаНаСервере()
    Если Не ЗначениеЗаполнено(Объект.Студент) Тогда
        Возврат Неопределено;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.Факультет КАК Факультет
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &Студент";
    
    Запрос.УстановитьПараметр("Студент", Объект.Студент);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.Факультет;
    КонецЕсли;
    
    Возврат Неопределено;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Элементы.Дисциплина.УстановитьДействие("ПриИзменении", "ДисциплинаПриИзменении");
КонецПроцедуры

&НаКлиенте
Процедура ДисциплинаПриИзменении(Элемент)
    // При изменении дисциплины подставляем соответствующую форму контроля
    ПодставитьФормуКонтроля();
    ПроверитьДисциплинуНаСоответствиеОснованию();
КонецПроцедуры

&НаКлиенте
Процедура ПодставитьФормуКонтроля()
    Если ЗначениеЗаполнено(Объект.Дисциплина) Тогда
        // Получаем форму контроля для выбранной дисциплины
        ФормаКонтроля = ПолучитьФормуКонтроляДисциплиныНаСервере(Объект.Дисциплина);
        Объект.ФормаКонтроля = ФормаКонтроля;
    Иначе
        Объект.ФормаКонтроля = Неопределено;
    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьФормуКонтроляДисциплиныНаСервере(Дисциплина)
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Дисциплины.ФормаКонтроля КАК ФормаКонтроля
    |ИЗ
    |    Справочник.Дисциплины КАК Дисциплины
    |ГДЕ
    |    Дисциплины.Ссылка = &Дисциплина";
    
    Запрос.УстановитьПараметр("Дисциплина", Дисциплина);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.ФормаКонтроля;
    КонецЕсли;
    
    Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ПроверитьДисциплинуНаСоответствиеОснованию()
    Если Не ЗначениеЗаполнено(Объект.Дисциплина) ИЛИ Не ЗначениеЗаполнено(Объект.Основание) Тогда
		Объект.Дисциплина = Неопределено;
		Возврат;
    КонецЕсли;
    
    РазрешенныеДисциплины = ПолучитьДисциплиныИзОснованияНаСервере();
    
    Если РазрешенныеДисциплины.Найти(Объект.Дисциплина) = Неопределено Тогда
        ВызватьИсключение("Выбранная дисциплина отсутствует в документе-основании!");
        Объект.Дисциплина = Неопределено;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    
    // Проверяем заполненность обязательных полей
    Если Не ЗначениеЗаполнено(Объект.Дисциплина) Тогда
        Отказ = Истина;
        ВызватьИсключение("Нельзя записать документ с пустым полем 'Дисциплина'!");
        Возврат;
    КонецЕсли;
    
    // Проверяем соответствие дисциплины документу-основанию
    Если ЗначениеЗаполнено(Объект.Основание) Тогда
        РазрешенныеДисциплины = ПолучитьДисциплиныИзОснованияНаСервере();
        
        Если РазрешенныеДисциплины.Найти(Объект.Дисциплина) = Неопределено Тогда
            Отказ = Истина;
            ВызватьИсключение("Невозможно записать документ. Выбранная дисциплина отсутствует в документе-основании!");
            Возврат;
        КонецЕсли;
    КонецЕсли;
    
    // Проверяем уникальность дисциплины
    ПроверитьУникальностьДисциплиныДляСтудента(Отказ);
	Если Отказ Тогда
        Возврат;
    КонецЕсли;
    
    // Проверяем уникальность даты и времени
    ПроверитьУникальностьДатыИВремениНаправления(Отказ);
	Если Отказ Тогда
        Возврат;
    КонецЕсли;
	
    
КонецПроцедуры

&НаСервере
Процедура ПроверитьУникальностьДисциплиныДляСтудента(Отказ)
    Если Не ЗначениеЗаполнено(Объект.Основание) 
        Или Не ЗначениеЗаполнено(Объект.Студент)
        Или Не ЗначениеЗаполнено(Объект.Дисциплина) Тогда
        Возврат;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Направление.Ссылка,
    |    Направление.Дисциплина КАК Дисциплина
    |ИЗ
    |    Документ.НаправлениеНаПересдачу КАК Направление
    |ГДЕ
    |    Направление.Студент = &Студент
    |    И Направление.Дисциплина = &ТекущаяДисциплина
    |    И Направление.Проведен = Истина";
    
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        Запрос.Текст = Запрос.Текст + "
        |    И Направление.Ссылка <> &ТекущийДокумент";
        Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Ссылка);
    КонецЕсли;
    
    Запрос.УстановитьПараметр("Студент", Объект.Студент);
    Запрос.УстановитьПараметр("ТекущаяДисциплина", Объект.Дисциплина);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        НаименованиеДисциплины = "";
        Если ЗначениеЗаполнено(Выборка.Дисциплина) Тогда
            ЗапросНаименование = Новый Запрос;
            ЗапросНаименование.Текст = 
            "ВЫБРАТЬ ПЕРВЫЕ 1
            |    Дисциплины.Наименование КАК Наименование
            |ИЗ
            |    Справочник.Дисциплины КАК Дисциплины
            |ГДЕ
            |    Дисциплины.Ссылка = &Дисциплина";
            
            ЗапросНаименование.УстановитьПараметр("Дисциплина", Выборка.Дисциплина);
            РезультатНаименование = ЗапросНаименование.Выполнить();
            ВыборкаНаименование = РезультатНаименование.Выбрать();
            
            Если ВыборкаНаименование.Следующий() Тогда
                НаименованиеДисциплины = ВыборкаНаименование.Наименование;
            КонецЕсли;
        КонецЕсли;
        
        Объект.Дисциплина = Неопределено;
        Отказ = Истина;
        ВызватьИсключение("Для данного студента уже существует проведенный документ НаправлениеНаПересдачу " +
                         "по дисциплине """ + НаименованиеДисциплины + """! " +
                         "Поле 'Дисциплина' очищено.");
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВводНаОснованииПеред(Отказ, СтандартнаяОбработка, Источник, Ссылка, Параметры)
    // Запрещаем ввод на основании, если в источнике нет дисциплины
    Если Источник.Дисциплина = Неопределено Тогда
        Отказ = Истина;
        ВызватьИсключение("Нельзя выполнить ввод на основании для документа с пустым полем 'Дисциплина'!"); 
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьУникальностьДатыИВремениНаправления(Отказ)
    Если Не ЗначениеЗаполнено(Объект.ДатаПроведения) 
        Или Не ЗначениеЗаполнено(Объект.Время)
        Или Не ЗначениеЗаполнено(Объект.Аудитория) Тогда
        Возврат;
    КонецЕсли;
    
    Отказ = Ложь;
    ОбщиеПроцедурыСистемы.ПроверитьУникальностьДатыИВремени(
        "НаправлениеНаПересдачу",
        Объект.ДатаПроведения,
        Объект.Время,
        Объект.Аудитория,
        Объект.Ссылка,
        Отказ
    );
    
    Если Отказ Тогда
        Объект.ДатаПроведения = Неопределено;
        Объект.Время = Неопределено;
        Объект.Аудитория = Неопределено;
        ВызватьИсключение("Документ с указанной датой, временем и аудиторией уже существует в системе! Пожалуйста, укажите другие данные!");
    КонецЕсли;
КонецПроцедуры
