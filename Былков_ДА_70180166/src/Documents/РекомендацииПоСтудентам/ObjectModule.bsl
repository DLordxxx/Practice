&НаСервере
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
    
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВедомостьУчетаАкадемическихЗадолженностей")ИЛИ
		ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ") Тогда
        
        Дисциплина = ДанныеЗаполнения.Дисциплина;
        Студент = ДанныеЗаполнения.Студент;
        ДокументОснование = ДанныеЗаполнения.Ссылка;
        
        // Проверяем, нет ли уже рекомендаций для этого студента по данной дисциплине
        Если ЕстьДублирующиеРекомендации(Студент, Дисциплина, ДокументОснование) Тогда
            ВызватьИсключение "Для студента " + ДанныеЗаполнения.Студент + 
                             " по дисциплине " + ДанныеЗаполнения.Дисциплина + 
                             " на основании документа " + ДанныеЗаполнения.Ссылка+ " уже существует документ «Рекомендации по студентам»!";
        КонецЕсли;

        // Получаем данные студента 
        ДанныеСтудента = ПолучитьДанныеСтудента(Студент); 
        
        // Устанавливаем группу студента
        Если ДанныеСтудента.Свойство("ГруппаСсылка") Тогда
            ЭтотОбъект.Группа = ДанныеСтудента.ГруппаСсылка;
        КонецЕсли;
                      
        // Получаем форму обучения студента
        Если ДанныеСтудента.Свойство("ФормаОбучения") Тогда
            ЭтотОбъект.ФормаОбучения = ДанныеСтудента.ФормаОбучения;
        КонецЕсли;
        
        // Определяем решение комиссии на основании статуса
        Если ДокументОснование.СтатусАкадемическойЗадолженности = Перечисления.НаименованиеСтатуса.Закрытая Тогда
            ЭтотОбъект.Рекомендация = Перечисления.РешениеКомиссии.ЗадолженностьЛиквидирована;
        ИначеЕсли ДокументОснование.СтатусАкадемическойЗадолженности = Перечисления.НаименованиеСтатуса.Активная Тогда
            ЭтотОбъект.Рекомендация = Перечисления.РешениеКомиссии.РекомендоватьОтчисление;
		КонецЕсли;  
		
	КонецЕсли;

                
КонецПроцедуры

&НаСервере
Функция ЕстьДублирующиеРекомендации(Студент, Дисциплина, ДокументОснование)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    РекомендацииПоСтудентам.Ссылка КАК Ссылка
    |ИЗ
    |    Документ.РекомендацииПоСтудентам КАК РекомендацииПоСтудентам
    |ГДЕ
    |    РекомендацииПоСтудентам.Студент = &Студент
    |    И РекомендацииПоСтудентам.Дисциплина = &Дисциплина
    |    И РекомендацииПоСтудентам.ДокументОснование = &ДокументОснование
    |    И РекомендацииПоСтудентам.ПометкаУдаления = ЛОЖЬ";
    
    Запрос.УстановитьПараметр("Студент", Студент);
    Запрос.УстановитьПараметр("Дисциплина", Дисциплина);
    Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
    Результат = Запрос.Выполнить();
    
    Возврат Не Результат.Пустой();
    
КонецФункции

&НаСервере
Функция ПолучитьДанныеСтудента(СсылкаНаСтудента) Экспорт
    Результат = Новый Структура;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.Группа,
    |    Студенты.ФормаОбучения КАК ФормаОбучения,
    |    Студенты.Наименование КАК Наименование
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &СсылкаНаСтудента"; 

    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();    

    Если Выборка.Следующий() Тогда
             
      	Результат.Вставить("ГруппаСсылка", Выборка.Группа);
       	Результат.Вставить("НаименованиеСтудента", Выборка.Наименование);
        Результат.Вставить("ФормаОбучения", Выборка.ФормаОбучения);
    КонецЕсли;
    
    Возврат Результат; 
КонецФункции   

