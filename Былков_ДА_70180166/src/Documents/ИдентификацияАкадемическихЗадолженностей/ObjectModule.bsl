&НаСервере
// Основная процедура заполнения документа на основании
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

    Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АкадемическаяНеуспеваемость") Тогда
        // Заполнение шапки
        ЛичныйИндекс = ДанныеЗаполнения.ИндексСтудента;
        Основание = ДанныеЗаполнения.Ссылка; 
        
        // Проверяем наличие записей в табличной части
        Если ДанныеЗаполнения.ХарактеристикаСтудента.Количество() = 0 Тогда
            ВызватьИсключение ("У студента отсутствуют академические задолженности!");
        КонецЕсли;
        
        // Проверяем наличие ИндексСтудента
        Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ИндексСтудента) Тогда
            ВызватьИсключение ("В документе-основании не указан ИндексСтудента!");
        КонецЕсли;
        
        // Проверяем, нет ли уже документа для текущего студента
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |    ИдентификацияАкадемическихЗадолженностей.Ссылка КАК Ссылка
        |ИЗ
        |    Документ.ИдентификацияАкадемическихЗадолженностей КАК ИдентификацияАкадемическихЗадолженностей
        |ГДЕ
        |    ИдентификацияАкадемическихЗадолженностей.ЛичныйИндекс = &ЛичныйИндекс";
        
        Запрос.УстановитьПараметр("ЛичныйИндекс", ДанныеЗаполнения.ИндексСтудента);
        Результат = Запрос.Выполнить();
      	Выборка = Результат.Выбрать();

    	Если Выборка.Количество() > 0 Тогда
            ВызватьИсключение ("Для студента с индексом «" + ДанныеЗаполнения.ИндексСтудента + 
                             "» уже существует документ «Идентификации академических задолженностей»!");
        КонецЕсли;
        
        // Получаем и проверяем данные студента по индексу
        ДанныеСтудента = ПолучитьДанныеСтудентаПоИндексу(ДанныеЗаполнения.ИндексСтудента);
        
        Если ДанныеСтудента = Неопределено Тогда
            ВызватьИсключение ("Не удалось найти студента с индексом: " + ДанныеЗаполнения.ИндексСтудента);
        КонецЕсли;
               
        // Заполняем реквизиты документа
        ЭтотОбъект.Студент = ДанныеСтудента.СсылкаСтудента; // Используем ссылку на студента
        ЭтотОбъект.Группа = ДанныеСтудента.ГруппаСсылка;
        ЭтотОбъект.НаправлениеПодготовки = ДанныеСтудента.НаправлениеПодготовки;
        ЭтотОбъект.Факультет = ДанныеСтудента.Факультет;
        ЭтотОбъект.Семестр = ДанныеСтудента.Семестр;
        ЭтотОбъект.ФормаОбучения = ДанныеСтудента.ФормаОбучения;
        ЭтотОбъект.ПрофильСтудента = ДанныеСтудента.ПрофильСтудента;
        ЭтотОбъект.ЛичныйИндекс = ДанныеЗаполнения.ИндексСтудента; // Сохраняем индекс из исходного документа

        // Копируем дисциплины из исходного документа
        ЗаполнитьТабличнуюЧастьИзОснования(ДанныеЗаполнения.ХарактеристикаСтудента);
        
    КонецЕсли;   
    
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтудентаПоИндексу(ИндексСтудента)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	Студенты.ЛичныйИндекс КАК ЛичныйИндекс,
    |	Студенты.Группа КАК Группа,
    |	Студенты.НаправлениеПодготовки КАК НаправлениеПодготовки,
    |	Студенты.Факультет КАК Факультет,
    |	Студенты.Семестр КАК Семестр,
    |	Студенты.ФормаОбучения КАК ФормаОбучения,
    |	Студенты.Наименование КАК НаименованиеСтудента,
    |	Студенты.Ссылка КАК СсылкаСтудента,
    |	Студенты.ПрофильСтудента КАК ПрофильСтудента
    |ИЗ
    |	Справочник.Студенты КАК Студенты
    |ГДЕ
    |	Студенты.ЛичныйИндекс = &ИндексСтудента";
    
    Запрос.УстановитьПараметр("ИндексСтудента", ИндексСтудента);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Результат = Новый Структура;
        Результат.Вставить("ЛичныйИндекс", Выборка.ЛичныйИндекс);
        Результат.Вставить("НаименованиеСтудента", Выборка.НаименованиеСтудента);
        Результат.Вставить("СсылкаСтудента", Выборка.СсылкаСтудента);
        Результат.Вставить("ГруппаСсылка", Выборка.Группа);

        Результат.Вставить("НаправлениеПодготовки", Выборка.НаправлениеПодготовки);
		Результат.Вставить("ПрофильСтудента", Выборка.ПрофильСтудента);
        Результат.Вставить("Факультет", Выборка.Факультет);
        Результат.Вставить("Семестр", Выборка.Семестр);
        Результат.Вставить("ФормаОбучения", Выборка.ФормаОбучения);
        
        Возврат Результат;
    КонецЕсли;
    
    Возврат Неопределено;
КонецФункции

&НаСервере
// Заполнение табличной части из документа-основания
Процедура ЗаполнитьТабличнуюЧастьИзОснования(ТаблицаОснования)
    
    ЭтотОбъект.Характеристика.Очистить();
    
    Для Каждого СтрокаОснования Из ТаблицаОснования Цикл
        НоваяСтрока = ЭтотОбъект.Характеристика.Добавить();
        НоваяСтрока.Дисциплины = СтрокаОснования.Дисциплина; 
        НоваяСтрока.ФормаКонтроля = ПолучитьФормуКонтроляДисциплины(СтрокаОснования.Дисциплина);
		
	КонецЦикла;
    
    Если ЭтотОбъект.Характеристика.Количество() = 0 Тогда
        ВызватьИсключение "Не удалось заполнить табличную часть!";
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
// Получение формы контроля для дисциплины
Функция ПолучитьФормуКонтроляДисциплины(Дисциплина)
    
    Если Не ЗначениеЗаполнено(Дисциплина) Тогда
        Возврат Неопределено;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Дисциплины.ФормаКонтроля КАК ФормаКонтроля
    |ИЗ
    |    Справочник.Дисциплины КАК Дисциплины
    |ГДЕ
    |    Дисциплины.Ссылка = &Дисциплина";
    
    Запрос.УстановитьПараметр("Дисциплина", Дисциплина);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.ФормаКонтроля;
    КонецЕсли;
    
    Возврат Неопределено;
КонецФункции