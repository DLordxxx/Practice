&НаСервере
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
    
    Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПротоколЗаседанияКомиссии") Тогда 
			
		
        // Получаем данные из документа-основания
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |    ПротоколЗаседанияКомиссии.КоличествоВозникшихЗадолженностей,
        |    ПротоколЗаседанияКомиссии.КоличествоЛиквидированныхЗадолженностей,
        |    ПротоколЗаседанияКомиссии.ПроцентЗадолженностей,
        |    ПротоколЗаседанияКомиссии.Группа,
        |    ПротоколЗаседанияКомиссии.Семестр,
        |    ПротоколЗаседанияКомиссии.Студент
        |ИЗ
        |    Документ.ПротоколЗаседанияКомиссии КАК ПротоколЗаседанияКомиссии
        |ГДЕ
        |    ПротоколЗаседанияКомиссии.Ссылка = &СсылкаНаДокумент";
        
        Запрос.УстановитьПараметр("СсылкаНаДокумент", ДанныеЗаполнения);
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если Не Выборка.Следующий() Тогда
            СтандартнаяОбработка = Ложь;
            ВызватьИсключение "Не удалось получить данные из документа-основания (Протокол заседания комиссии).";
        КонецЕсли;
		
		// Рассчитываем количество неликвидированных задолженностей
        КоличествоПросроченныхЗадолженностей = Выборка.КоличествоВозникшихЗадолженностей - Выборка.КоличествоЛиквидированныхЗадолженностей;
		
        // Заполняем реквизиты документа
        ЭтотОбъект.Группа = Выборка.Группа;
        ЭтотОбъект.Семестр = Выборка.Семестр;
        ЭтотОбъект.Основание = ДанныеЗаполнения;
        ЭтотОбъект.Студент = Выборка.Студент;
        ЭтотОбъект.КоличествоПросроченныхЗадолженностей = КоличествоПросроченныхЗадолженностей;
        
        // Получаем данные студента
        ДанныеСтудента = ПолучитьДанныеСтудента(ЭтотОбъект.Студент);
        
        Если ДанныеСтудента.Свойство("НаправлениеПодготовки") Тогда
            ЭтотОбъект.НаправлениеПодготовки = ДанныеСтудента.НаправлениеПодготовки;
        КонецЕсли;
        
        // Проверяем основания для отчисления в правильном порядке:
        
        // 1. Сначала проверяем неудачную вторую попытку (активные задолженности)
        Если ПроверитьАктивныеЗадолженности(Выборка.Студент).ЕстьАктивныеЗадолженности Тогда
            Сообщить("Отчисление студента по результатам неудачной второй попытки ликвидации задолженности!", 
                    СтатусСообщения.Важное);
                
        // 2. Иначе, при отсутствии академических задолженностей, выдаем исключение
        Иначе
            СтандартнаяОбработка = Ложь;
            ВызватьИсключение "Студент не имеет академических задолженностей! Ввод документа «Приказ об отчислении» " +
                            "возможен только при наличии активных задолженностей!";
		КонецЕсли;   
		
		ПроверитьНаличиеПриказа(Студент);

    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьАктивныеЗадолженности(Студент)
    
    Результат = Новый Структура;
    Результат.Вставить("ЕстьАктивныеЗадолженности", Ложь);
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.Ссылка
    |ИЗ
    |    Документ.ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ КАК ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ
    |ГДЕ
    |    ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.Студент = &Студент
    |    И ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.СтатусАкадемическойЗадолженности = &АктивнаяЗадолженность
    |    И НЕ ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.ПометкаУдаления
    |    И ВедомостьУчетаАкадемическихЗадолженностейДляСтудентовсИОМ.Проведен";
    
    Запрос.УстановитьПараметр("Студент", Студент);
    Запрос.УстановитьПараметр("АктивнаяЗадолженность", Перечисления.НаименованиеСтатуса.Активная);
    
    Если Запрос.Выполнить().Выбрать().Следующий() Тогда
        Результат.ЕстьАктивныеЗадолженности = Истина;
    КонецЕсли;
    
    Возврат Результат;
КонецФункции

&НаСервере
Процедура ПроверитьНаличиеПриказа(Студент)
    
    Если ПустаяСтрока(Студент) Тогда
        ДанныеСтудента = ПолучитьДанныеСтудента(Студент);
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    ПриказОбОтчислении.Ссылка КАК Ссылка,
    |    ПриказОбОтчислении.Дата КАК Дата,
    |    ПриказОбОтчислении.Номер КАК Номер
    |ИЗ
    |    Документ.ПриказОбОтчислении КАК ПриказОбОтчислении
    |ГДЕ
    |    ПриказОбОтчислении.Студент = &Студент
    |    И ПриказОбОтчислении.ПометкаУдаления = ЛОЖЬ";

    Запрос.УстановитьПараметр("Студент", Студент);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();

    Если Выборка.Количество() > 0 Тогда
        ВызватьИсключение("Для студента " + Студент + " уже существует «Приказ об отчислении»!");
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтудента(СсылкаНаСтудента) Экспорт
    Результат = Новый Структура;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	Студенты.НаправлениеПодготовки КАК НаправлениеПодготовки,
    |	Студенты.Семестр КАК Семестр
    |ИЗ
    |	Справочник.Студенты КАК Студенты
    |ГДЕ
    |	Студенты.Ссылка = &СсылкаНаСтудента";
    
    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Результат.Вставить("НаправлениеПодготовки", Выборка.НаправлениеПодготовки);
		Результат.Вставить("Семестр", Выборка.Семестр);

	КонецЕсли;
    
    Возврат Результат;
КонецФункции

&НаСервере
Процедура ОбработкаПроведения(Отказ, Режим)

	// регистр ПросроченныеЗадолженностиДляОтчисления
	Движения.ПросроченныеЗадолженностиДляОтчисления.Записывать = Истина;
	Движение = Движения.ПросроченныеЗадолженностиДляОтчисления.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	Движение.Период = Дата;
	Движение.Студент = Студент;
	Движение.Семестр = Семестр;
	Движение.КоличествоПросроченныхЗадолженностейДляОтчисления = КоличествоПросроченныхЗадолженностей;

	КонецПроцедуры