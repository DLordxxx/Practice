&НаСервере
Функция ПолучитьДисциплиныИзОснования(СсылкаНаОснование)
	
	Если СсылкаНаОснование = Неопределено Тогда
        Возврат Новый Массив;
    КонецЕсли;
    

	Если ТипЗнч(СсылкаНаОснование) <> Тип("ДокументСсылка.ИдентификацияАкадемическихЗадолженностей") Тогда
        Возврат Новый Массив;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗЛИЧНЫЕ
    |    Характеристика.Дисциплины КАК Дисциплины
    |ИЗ
    |    Документ.ИдентификацияАкадемическихЗадолженностей.Характеристика КАК Характеристика
    |ГДЕ
    |    Характеристика.Ссылка = &Основание";
    
    Запрос.УстановитьПараметр("Основание", СсылкаНаОснование);
    Результат = Запрос.Выполнить();
    
    МассивДисциплин = Новый Массив;
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        МассивДисциплин.Добавить(Выборка.Дисциплины);
    КонецЦикла;
    
    Возврат МассивДисциплин;
КонецФункции

&НаКлиенте
Процедура ДисциплинаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    
	Если Не ЗначениеЗаполнено(Объект.Основание) Тогда
        ВызватьИсключение("Необходимо сначала выбрать документ-основание!");
        Возврат;
    КонецЕсли;
    

	ПараметрыФормы = Новый Структура;
    
    // Получаем список доступных дисциплин
    МассивДисциплин = ПолучитьДисциплиныИзОснованияНаСервере();
    
    Если МассивДисциплин.Количество() = 0 Тогда
        ВызватьИсключение("В документе-основании не указаны дисциплины!");
        Возврат;
    КонецЕсли;
    
    // Создаем отбор для формы выбора по дисциплинам из основания
    ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", МассивДисциплин));
    
	
	ФакультетСтудента = ПолучитьФакультетСтудентаНаСервере();
    

	ПараметрыФормы.Вставить("ОтборПоРодителю", Новый Структура("Родитель", ФакультетСтудента));
    

	ФормаВыбора = ОткрытьФорму("Справочник.Дисциплины.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаСервере
Функция ПолучитьДисциплиныИзОснованияНаСервере()
    Возврат ПолучитьДисциплиныИзОснования(Объект.Основание);
КонецФункции

&НаСервере
Функция ПолучитьФакультетСтудентаНаСервере()
    // Проверяем, что студент заполнен
    Если Не ЗначениеЗаполнено(Объект.Студент) Тогда
        Возврат Неопределено;
    КонецЕсли;
    
    // Получаем факультет из объекта студента
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.Факультет КАК Факультет
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &Студент";
    
    Запрос.УстановитьПараметр("Студент", Объект.Студент);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.Факультет;
    КонецЕсли;
    
    Возврат Неопределено;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Дисциплина.УстановитьДействие("ПриИзменении", "ДисциплинаПриИзменении");
КонецПроцедуры

&НаКлиенте
Процедура ДисциплинаПриИзменении(Элемент)
    // Проверяем выбранную дисциплину на соответствие документу-основанию
    ПроверитьДисциплинуНаСоответствиеОснованию();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДисциплинуНаСоответствиеОснованию()
    // Если дисциплина или основание не заполнены, пропускаем проверку
    Если Не ЗначениеЗаполнено(Объект.Дисциплина) ИЛИ Не ЗначениеЗаполнено(Объект.Основание) Тогда
        Возврат;
    КонецЕсли;
    
    // Проверяем, находится ли выбранная дисциплина в списке разрешенных
    РазрешенныеДисциплины = ПолучитьДисциплиныИзОснованияНаСервере();
    
    Если РазрешенныеДисциплины.Найти(Объект.Дисциплина) = Неопределено Тогда
        // Если дисциплина не найдена в списке разрешенных - вызываем исключение
        ВызватьИсключение("Выбранная дисциплина отсутствует в документе-основании!");
        // Сбрасываем значение поля
        Объект.Дисциплина = Неопределено;
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Дисциплина) И ЗначениеЗаполнено(ТекущийОбъект.Основание) Тогда
        МассивДисциплин = ПолучитьДисциплиныИзОснования(ТекущийОбъект.Основание);
        
        Если МассивДисциплин.Найти(ТекущийОбъект.Дисциплина) = Неопределено Тогда
            // Добавляем сообщение для пользователя о проблеме
            Сообщить("Внимание! В документе указана дисциплина, отсутствующая в документе-основании!", СтатусСообщения.Важное);
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    // Проверяем соответствие дисциплины документу-основанию
    Если ЗначениеЗаполнено(Объект.Дисциплина) И ЗначениеЗаполнено(Объект.Основание) Тогда
        РазрешенныеДисциплины = ПолучитьДисциплиныИзОснованияНаСервере();
        
        Если РазрешенныеДисциплины.Найти(Объект.Дисциплина) = Неопределено Тогда
            // Если дисциплина не найдена в списке разрешенных - отказываем в записи
            Сообщить("Невозможно записать документ. Выбранная дисциплина отсутствует в документе-основании!", СтатусСообщения.Важное);
            Отказ = Истина;
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры