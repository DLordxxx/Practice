&НаСервере
Функция ПолучитьФормуКонтроляДисциплины(Дисциплина) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Дисциплины.НаименованиеКонтроля КАК НаименованиеКонтроля
    |ИЗ
    |    Справочник.Дисциплины КАК Дисциплины
    |ГДЕ
    |    Дисциплины.Ссылка = &Дисциплина";
    Запрос.УстановитьПараметр("Дисциплина", Дисциплина);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Если Выборка.Следующий() Тогда
        Возврат Выборка.НаименованиеКонтроля;
    КонецЕсли;
    Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьДанныеСтудента(СсылкаНаСтудента) Экспорт
    Результат = Новый Структура;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.ЛичныйИндекс,
    |    Студенты.Родитель КАК РодительСправочника,
    |    Студенты.Родитель.Наименование КАК НаименованиеРодителя,
    |    Студенты.НаправленияПодготовки,
    |    Студенты.Факультет,
    |    Студенты.Семестр,
    |    Студенты.ФормаОбучения,
    |    Студенты.Наименование
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &СсылкаНаСтудента"; 

    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();    

    Если Выборка.Следующий() Тогда
        Результат.Вставить("ЛичныйИндекс", Выборка.ЛичныйИндекс);
        
        // Получаем группу из родителя иерархии
        Если ЗначениеЗаполнено(Выборка.РодительСправочника) Тогда
            // Ищем соответствующую группу в справочнике Группы
            Группа = НайтиГруппуПоНаименованию(Выборка.НаименованиеРодителя);
            
            Результат.Вставить("ГруппаСсылка", Группа);
            Результат.Вставить("ГруппаНаименование", Выборка.НаименованиеРодителя);
        КонецЕсли;
        
        Результат.Вставить("НаименованиеСтудента", Выборка.Наименование);
        Результат.Вставить("НаправленияПодготовки", Выборка.НаправленияПодготовки);
        Результат.Вставить("Факультет", Выборка.Факультет);
        Результат.Вставить("Семестр", Выборка.Семестр);
        Результат.Вставить("ФормаОбучения", Выборка.ФормаОбучения);
    КонецЕсли;
    
    Возврат Результат;
КонецФункции

&НаСервере
Функция НайтиГруппуПоНаименованию(НаименованиеГруппы)
    // Поиск группы по наименованию в справочнике Группы
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Группы.Ссылка КАК Ссылка
    |ИЗ
    |    Справочник.Группы КАК Группы
    |ГДЕ
    |    Группы.Наименование = &Наименование";
    
    Запрос.УстановитьПараметр("Наименование", НаименованиеГруппы);
    
    Попытка
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если Выборка.Следующий() Тогда
            Возврат Выборка.Ссылка;
        КонецЕсли;
    Исключение
        // Логируем ошибку, если нужно
    КонецПопытки;
    
    Возврат Неопределено;
КонецФункции

&НаСервере
Процедура ОбработкаПроведения(Отказ, Режим)
    // Получаем данные студента для проведения
    ДанныеСтудента = ПолучитьДанныеСтудента(ЭтотОбъект.Студент);
    
    Движения.ПросроченныеЗадолженности.Записывать = Истина;
    Для Каждого ТекСтрокаХарактеристика Из Характеристика Цикл
        Движение = Движения.ПросроченныеЗадолженности.Добавить();
        Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
        Движение.Период = Дата;
        Движение.Студент = ЭтотОбъект.Студент;
        Движение.Группа = ЭтотОбъект.Группа;
        Движение.Семестр = ЭтотОбъект.Семестр;
        Движение.КоличествоПросроченныхЗадолженностей = 1;
    КонецЦикла;

    Движения.НеудачныеПересдачи.Записывать = Истина;
    Для Каждого ТекСтрокаХарактеристика Из Характеристика Цикл
        Движение = Движения.НеудачныеПересдачи.Добавить();
        Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
        Движение.Период = Дата;
        Движение.Студент = ЭтотОбъект.Студент;
        Движение.Группа = ЭтотОбъект.Группа;
        Движение.Дисциплина = ТекСтрокаХарактеристика.Дисциплины;
        Движение.КоличествоНеудачныхПересдач = 1;
    КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
    Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РезультатыПредыдущихСессий") Тогда
        // Устанавливаем ссылку на студента из документа-основания
        ЭтотОбъект.Студент = ДанныеЗаполнения.Студент;
        
        // Получаем полные данные студента
        ДанныеСтудента = ПолучитьДанныеСтудента(ЭтотОбъект.Студент);
        
        // Проверяем, что данные студента получены
        Если ДанныеСтудента = Неопределено Тогда
            ВызватьИсключение "Не удалось получить данные студента!";
        КонецЕсли;
        
        // Проверяем наличие группы у студента
        Если НЕ ЗначениеЗаполнено(ДанныеСтудента.ГруппаСсылка) Тогда
            ВызватьИсключение "Не удалось определить группу студента!";
        КонецЕсли;
        
        // Заполняем реквизиты документа на основании данных студента
        ЭтотОбъект.ЛичныйИндекс = ДанныеСтудента.ЛичныйИндекс;
        ЭтотОбъект.Группа = ДанныеСтудента.ГруппаСсылка;
        ЭтотОбъект.НаправленияПодготовки = ДанныеСтудента.НаправленияПодготовки;
        ЭтотОбъект.Факультет = ДанныеСтудента.Факультет;
        ЭтотОбъект.Семестр = ДанныеСтудента.Семестр;
        ЭтотОбъект.ФормаОбучения = ДанныеСтудента.ФормаОбучения;
        
        // Очищаем существующие записи перед заполнением
        Характеристика.Очистить();
        
        // Получаем табличную часть документа-основания
        ТабЧасть = ДанныеЗаполнения.ХарактеристикаСтудента;
        
        // Флаг для проверки задолженностей
        ЕстьЗадолженности = Ложь;
        
        Для Каждого СтрокаТабЧасти Из ТабЧасть Цикл
            // Проверяем отрицательные оценки
            Если СтрокаТабЧасти.Оценка = Перечисления.Оценка.Неудовлетворительно 
               ИЛИ СтрокаТабЧасти.Оценка = Перечисления.Оценка.Незачет Тогда
                
                ФормаКонтроля = ПолучитьФормуКонтроляДисциплины(СтрокаТабЧасти.Дисциплина);
                
                Если ФормаКонтроля <> Неопределено Тогда
                    НоваяСтрока = Характеристика.Добавить();
                    НоваяСтрока.Дисциплины = СтрокаТабЧасти.Дисциплина;
                    НоваяСтрока.ФормаКонтроля = ФормаКонтроля;
                    ЕстьЗадолженности = Истина;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
        
        // Проверяем условия для вызова исключения
        Если Не ЕстьЗадолженности Тогда
            ВызватьИсключение "Академические задолженности у студента отсутствуют!";
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиГруппуПоНаименованиюГруппыСтудента(СсылкаНаСтудента)
    // Получение наименования группы студента
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.Родитель.Наименование КАК НаименованиеГруппы
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &СсылкаНаСтудента";
    
    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
    
    Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.НаименованиеГруппы) Тогда
        // Находим соответствующую группу в справочнике Группы
        Возврат НайтиГруппуПоНаименованию(Выборка.НаименованиеГруппы);
    КонецЕсли;
    
    Возврат Справочники.Группы.ПустаяСсылка();
КонецФункции
