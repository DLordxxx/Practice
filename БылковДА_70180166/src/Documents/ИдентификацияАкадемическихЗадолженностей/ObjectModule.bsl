&НаСервере
Функция ПолучитьФормуКонтроляДисциплины(Дисциплина) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Дисциплины.НаименованиеКонтроля КАК НаименованиеКонтроля
    |ИЗ
    |    Справочник.Дисциплины КАК Дисциплины
    |ГДЕ
    |    Дисциплины.Ссылка = &Дисциплина";
    Запрос.УстановитьПараметр("Дисциплина", Дисциплина);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Если Выборка.Следующий() Тогда
        Возврат Выборка.НаименованиеКонтроля;
    КонецЕсли;
    Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьДанныеСтудентаСКурсом(СсылкаНаСтудента) Экспорт
    Результат = Новый Структура;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.ЛичныйИндекс,
    |    Студенты.Родитель КАК РодительСправочника,
    |    Студенты.Родитель.Наименование КАК НаименованиеРодителя,
    |    Студенты.НаправленияПодготовки,
    |    Студенты.Факультет,
    |    Студенты.Семестр,
    |    Студенты.ФормаОбучения,
    |    Студенты.Наименование
    |    
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &СсылкаНаСтудента"; 

    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();    

    Если Выборка.Следующий() Тогда
        Результат.Вставить("ЛичныйИндекс", Выборка.ЛичныйИндекс);
               
		
		Если ЗначениеЗаполнено(Выборка.РодительСправочника) Тогда
            
			Если Не ЗначениеЗаполнено(Группа) Тогда 
				Группа = Неопределено;

                Группа = ОбщиеПроцедурыДляСправочников.НайтиГруппуПоЧастичномуСовпадению(Выборка.НаименованиеРодителя);
            КонецЕсли;
            
            Результат.Вставить("ГруппаСсылка", Группа);
            Результат.Вставить("ГруппаНаименование", Выборка.НаименованиеРодителя);
        КонецЕсли;
        
        Результат.Вставить("НаименованиеСтудента", Выборка.Наименование);
        Результат.Вставить("НаправленияПодготовки", Выборка.НаправленияПодготовки);
        Результат.Вставить("Факультет", Выборка.Факультет);
        Результат.Вставить("Семестр", Выборка.Семестр);
        Результат.Вставить("ФормаОбучения", Выборка.ФормаОбучения);
    КонецЕсли;
    
    Возврат Результат;
КонецФункции

&НаСервере
Процедура ОбработкаПроведения(Отказ, Режим)

	// регистр ПросроченныеЗадолженности Приход
	Движения.ПросроченныеЗадолженности.Записывать = Истина;
	Для Каждого ТекСтрокаХарактеристика Из Характеристика Цикл
		Движение = Движения.ПросроченныеЗадолженности.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Студент = Студент;
		Движение.Группа = Группа;
		Движение.Семестр = Семестр;
		Движение.КоличествоПросроченныхЗадолженностей = ТекСтрокаХарактеристика.НомерСтроки;
	КонецЦикла;

	// регистр НеудачныеПересдачи Приход
	Движения.НеудачныеПересдачи.Записывать = Истина;
	Для Каждого ТекСтрокаХарактеристика Из Характеристика Цикл
		Движение = Движения.НеудачныеПересдачи.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Студент = Студент;
		Движение.Группа = Группа;
		Движение.Дисциплина = ТекСтрокаХарактеристика.Дисциплины;
		Движение.КоличествоНеудачныхПересдач = ТекСтрокаХарактеристика.НомерСтроки;
	КонецЦикла;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры
&НаСервере
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
    Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РезультатыПредыдущихСессий") Тогда
        ЭтотОбъект.Студент = ДанныеЗаполнения.Студент;
		
		ДанныеСтудента = ПолучитьДанныеСтудента(ЭтотОбъект.Студент);
        
		
		Если ДанныеСтудента = Неопределено Тогда
            ВызватьИсключение "Не удалось получить данные студента!";
        КонецЕсли;
        
        // Проверяем наличие группы у студента (с более детальным сообщением)
        Если НЕ ЗначениеЗаполнено(ДанныеСтудента.ГруппаСсылка) Тогда
            // Получаем имя родителя для диагностики
            ИмяРодителя = "";
            Если ДанныеСтудента.Свойство("ГруппаНаименование") Тогда
                ИмяРодителя = ДанныеСтудента.ГруппаНаименование;
            КонецЕсли;
            
            Если ПустаяСтрока(ИмяРодителя) Тогда
                ВызватьИсключение "Студент не привязан к группе (родительский элемент не указан)!";
            Иначе
                ВызватьИсключение "Не найдена группа с наименованием: " + ИмяРодителя + 
                                ". Проверьте соответствие групп в справочниках 'Студенты' и 'Группы'";
            КонецЕсли;
        КонецЕсли;
        
		
		ЭтотОбъект.ЛичныйИндекс = ДанныеСтудента.ЛичныйИндекс;
        ЭтотОбъект.Группа = ДанныеСтудента.ГруппаСсылка;
        ЭтотОбъект.НаправленияПодготовки = ДанныеСтудента.НаправленияПодготовки;
        ЭтотОбъект.Факультет = ДанныеСтудента.Факультет;
        ЭтотОбъект.Семестр = ДанныеСтудента.Семестр;
        ЭтотОбъект.ФормаОбучения = ДанныеСтудента.ФормаОбучения;
        
		
		Характеристика.Очистить();
        ТабЧасть = ДанныеЗаполнения.ХарактеристикаСтудента;
        ЕстьЗадолженности = Ложь;
        
        Для Каждого СтрокаТабЧасти Из ТабЧасть Цикл
            Если СтрокаТабЧасти.Оценка = Перечисления.Оценка.Неудовлетворительно 
               ИЛИ СтрокаТабЧасти.Оценка = Перечисления.Оценка.Незачет Тогда
                
                НаименованиеКонтроля = ПолучитьФормуКонтроляДисциплины(СтрокаТабЧасти.Дисциплина);
                
                Если НаименованиеКонтроля <> Неопределено Тогда
                    НоваяСтрока = Характеристика.Добавить();
                    НоваяСтрока.Дисциплины = СтрокаТабЧасти.Дисциплина;
                    НоваяСтрока.НаименованиеКонтроля = НаименованиеКонтроля;
                    ЕстьЗадолженности = Истина;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
        
        Если Не ЕстьЗадолженности Тогда
            ВызватьИсключение "Академические задолженности у студента отсутствуют!";
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиГруппуПоНаименованиюГруппыСтудента(СсылкаНаСтудента)
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.Родитель.Наименование КАК НаименованиеГруппы
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &СсылкаНаСтудента";
    
    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
    
    Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.НаименованиеГруппы) Тогда

		Возврат Выборка.НаименованиеГруппы;
    КонецЕсли;
    
    Возврат Справочники.Группы.ПустаяСсылка();
КонецФункции

&НаСервере
Функция ПолучитьДанныеЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
    Результат = Новый Структура;
    
    Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИдентификацияАкадемическихЗадолженностей") Тогда

		ДанныеСтудента = ПолучитьДанныеСтудента(ДанныеЗаполнения.Студент);
        
        Если ДанныеСтудента = Неопределено Тогда
            Возврат Результат;
        КонецЕсли;
        
		
		Результат.Вставить("Студент", ДанныеЗаполнения.Студент);
        Результат.Вставить("Группа", ДанныеЗаполнения.Группа);
        Результат.Вставить("Факультет", ДанныеЗаполнения.Факультет);
        Результат.Вставить("ФормаОбучения", ДанныеЗаполнения.ФормаОбучения);
        Результат.Вставить("НаправленияПодготовки", ДанныеЗаполнения.НаправленияПодготовки);
        Результат.Вставить("ЛичныйИндекс", ДанныеЗаполнения.ЛичныйИндекс);
        Результат.Вставить("Семестр", ДанныеЗаполнения.Семестр);
        Результат.Вставить("Курс", ДанныеСтудента.Курс); 
        
		
	КонецЕсли;
    
    Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьДанныеСтудента(СсылкаНаСтудента) Экспорт
    Результат = Новый Структура;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.ЛичныйИндекс,
    |    Студенты.Родитель КАК РодительСправочника,
    |    Студенты.Родитель.Наименование КАК НаименованиеРодителя,
    |    Студенты.НаправленияПодготовки,
    |    Студенты.Факультет,
    |    Студенты.Семестр,
    |    Студенты.ФормаОбучения,
    |    Студенты.Наименование
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &СсылкаНаСтудента";

    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();    

    Если Выборка.Следующий() Тогда
        Результат.Вставить("ЛичныйИндекс", Выборка.ЛичныйИндекс);
        
		
		Если ЗначениеЗаполнено(Выборка.РодительСправочника) Тогда
            Группа = Выборка.НаименованиеРодителя;
            Если Не ЗначениеЗаполнено(Группа) Тогда
                 Группа = ОбщиеПроцедурыДляСправочников.НайтиГруппуПоЧастичномуСовпадению(Выборка.НаименованиеРодителя);
            КонецЕсли;
            
            Результат.Вставить("ГруппаСсылка", Группа);
            Результат.Вставить("ГруппаНаименование", Выборка.НаименованиеРодителя);
        КонецЕсли;
        
        Результат.Вставить("НаименованиеСтудента", Выборка.Наименование);
        Результат.Вставить("НаправленияПодготовки", Выборка.НаправленияПодготовки);
        Результат.Вставить("Факультет", Выборка.Факультет);
        Результат.Вставить("Семестр", Выборка.Семестр);
        Результат.Вставить("ФормаОбучения", Выборка.ФормаОбучения);
    КонецЕсли;
    
    Возврат Результат;
КонецФункции


