&НаСервере
Функция ПолучитьФормуКонтроляДисциплины(Дисциплина) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Дисциплины.НаименованиеКонтроля КАК НаименованиеКонтроля
    |ИЗ
    |    Справочник.Дисциплины КАК Дисциплины
    |ГДЕ
    |    Дисциплины.Ссылка = &Дисциплина";
    Запрос.УстановитьПараметр("Дисциплина", Дисциплина);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Если Выборка.Следующий() Тогда
        Возврат Выборка.НаименованиеКонтроля;
    КонецЕсли;
    Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьДанныеСтудентаСКурсом(СсылкаНаСтудента) Экспорт
    Результат = Новый Структура;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.ЛичныйИндекс,
    |    Студенты.Родитель КАК РодительСправочника,
    |    Студенты.Родитель.Наименование КАК НаименованиеРодителя,
    |    Студенты.НаправленияПодготовки,
    |    Студенты.Факультет,
    |    Студенты.Семестр,
    |    Студенты.ФормаОбучения,
    |    Студенты.Наименование,
    |    Студенты.Курс // Добавляем курс студента
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &СсылкаНаСтудента"; 

    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();    

    Если Выборка.Следующий() Тогда
        Результат.Вставить("ЛичныйИндекс", Выборка.ЛичныйИндекс);
        Результат.Вставить("Курс", Выборка.Курс);
        
		
		Если ЗначениеЗаполнено(Выборка.РодительСправочника) Тогда
            Группа = НайтиГруппуПоНаименованию(Выборка.НаименованиеРодителя);
            Если Не ЗначениеЗаполнено(Группа) Тогда
                Группа = НайтиГруппуПоЧастичномуСовпадению(Выборка.НаименованиеРодителя);
            КонецЕсли;
            
            Результат.Вставить("ГруппаСсылка", Группа);
            Результат.Вставить("ГруппаНаименование", Выборка.НаименованиеРодителя);
        КонецЕсли;
        
        Результат.Вставить("НаименованиеСтудента", Выборка.Наименование);
        Результат.Вставить("НаправленияПодготовки", Выборка.НаправленияПодготовки);
        Результат.Вставить("Факультет", Выборка.Факультет);
        Результат.Вставить("Семестр", Выборка.Семестр);
        Результат.Вставить("ФормаОбучения", Выборка.ФормаОбучения);
    КонецЕсли;
    
    Возврат Результат;
КонецФункции

&НаСервере
Функция НайтиГруппуПоНаименованию(НаименованиеГруппы)
    // Поиск группы по точному совпадению наименования
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Группы.Ссылка КАК Ссылка
    |ИЗ
    |    Справочник.Группы КАК Группы
    |ГДЕ
    |    ВЕРХ(Группы.Наименование) = ВЕРХ(&Наименование)";
    
    Запрос.УстановитьПараметр("Наименование", НаименованиеГруппы);
    
    Попытка
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если Выборка.Следующий() Тогда
            Возврат Выборка.Ссылка;
        КонецЕсли;
    Исключение
        // Логируем ошибку
    КонецПопытки;
    
    Возврат Неопределено;
КонецФункции

&НаСервере
Функция НайтиГруппуПоЧастичномуСовпадению(НаименованиеГруппы)
    // Поиск группы по частичному совпадению наименования
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Группы.Ссылка КАК Ссылка
    |ИЗ
    |    Справочник.Группы КАК Группы
    |ГДЕ
    |    Группы.Наименование ПОДОБНО &Наименование";
    
    Запрос.УстановитьПараметр("Наименование", "%"+НаименованиеГруппы+"%");
    
    Попытка
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если Выборка.Следующий() Тогда
            Возврат Выборка.Ссылка;
        КонецЕсли;
    Исключение
        // Логируем ошибку
    КонецПопытки;
    
    Возврат Неопределено;
КонецФункции

&НаСервере
Процедура ОбработкаПроведения(Отказ, Режим)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр ПросроченныеЗадолженности Приход
	Движения.ПросроченныеЗадолженности.Записывать = Истина;
	Для Каждого ТекСтрокаХарактеристика Из Характеристика Цикл
		Движение = Движения.ПросроченныеЗадолженности.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Студент = Студент;
		Движение.Группа = Группа;
		Движение.Семестр = Семестр;
		Движение.КоличествоПросроченныхЗадолженностей = ТекСтрокаХарактеристика.НомерСтроки;
	КонецЦикла;

	// регистр НеудачныеПересдачи Приход
	Движения.НеудачныеПересдачи.Записывать = Истина;
	Для Каждого ТекСтрокаХарактеристика Из Характеристика Цикл
		Движение = Движения.НеудачныеПересдачи.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Студент = Студент;
		Движение.Группа = Группа;
		Движение.Дисциплина = ТекСтрокаХарактеристика.Дисциплины;
		Движение.КоличествоНеудачныхПересдач = ТекСтрокаХарактеристика.НомерСтроки;
	КонецЦикла;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры
&НаСервере
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
    Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РезультатыПредыдущихСессий") Тогда
        // Устанавливаем ссылку на студента из документа-основания
        ЭтотОбъект.Студент = ДанныеЗаполнения.Студент;
        
        // Получаем полные данные студента
        ДанныеСтудента = ПолучитьДанныеСтудента(ЭтотОбъект.Студент);
        
        // Проверяем, что данные студента получены
        Если ДанныеСтудента = Неопределено Тогда
            ВызватьИсключение "Не удалось получить данные студента!";
        КонецЕсли;
        
        // Проверяем наличие группы у студента (с более детальным сообщением)
        Если НЕ ЗначениеЗаполнено(ДанныеСтудента.ГруппаСсылка) Тогда
            // Получаем имя родителя для диагностики
            ИмяРодителя = "";
            Если ДанныеСтудента.Свойство("ГруппаНаименование") Тогда
                ИмяРодителя = ДанныеСтудента.ГруппаНаименование;
            КонецЕсли;
            
            Если ПустаяСтрока(ИмяРодителя) Тогда
                ВызватьИсключение "Студент не привязан к группе (родительский элемент не указан)!";
            Иначе
                ВызватьИсключение "Не найдена группа с наименованием: " + ИмяРодителя + 
                                ". Проверьте соответствие групп в справочниках 'Студенты' и 'Группы'";
            КонецЕсли;
        КонецЕсли;
        
        // Заполняем реквизиты документа
        ЭтотОбъект.ЛичныйИндекс = ДанныеСтудента.ЛичныйИндекс;
        ЭтотОбъект.Группа = ДанныеСтудента.ГруппаСсылка;
        ЭтотОбъект.НаправленияПодготовки = ДанныеСтудента.НаправленияПодготовки;
        ЭтотОбъект.Факультет = ДанныеСтудента.Факультет;
        ЭтотОбъект.Семестр = ДанныеСтудента.Семестр;
        ЭтотОбъект.ФормаОбучения = ДанныеСтудента.ФормаОбучения;
        
        // Очищаем и заполняем табличную часть
        Характеристика.Очистить();
        ТабЧасть = ДанныеЗаполнения.ХарактеристикаСтудента;
        ЕстьЗадолженности = Ложь;
        
        Для Каждого СтрокаТабЧасти Из ТабЧасть Цикл
            Если СтрокаТабЧасти.Оценка = Перечисления.Оценка.Неудовлетворительно 
               ИЛИ СтрокаТабЧасти.Оценка = Перечисления.Оценка.Незачет Тогда
                
                НаименованиеКонтроля = ПолучитьФормуКонтроляДисциплины(СтрокаТабЧасти.Дисциплина);
                
                Если НаименованиеКонтроля <> Неопределено Тогда
                    НоваяСтрока = Характеристика.Добавить();
                    НоваяСтрока.Дисциплины = СтрокаТабЧасти.Дисциплина;
                    НоваяСтрока.НаименованиеКонтроля = НаименованиеКонтроля;
                    ЕстьЗадолженности = Истина;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
        
        Если Не ЕстьЗадолженности Тогда
            ВызватьИсключение "Академические задолженности у студента отсутствуют!";
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиГруппуПоНаименованиюГруппыСтудента(СсылкаНаСтудента)
    // Получение наименования группы студента
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.Родитель.Наименование КАК НаименованиеГруппы
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &СсылкаНаСтудента";
    
    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
    
    Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.НаименованиеГруппы) Тогда
        // Находим соответствующую группу в справочнике Группы
        Возврат НайтиГруппуПоНаименованию(Выборка.НаименованиеГруппы);
    КонецЕсли;
    
    Возврат Справочники.Группы.ПустаяСсылка();
КонецФункции

&НаСервере
Функция СоздатьНаправленияНаПересдачу() Экспорт
    // Создаем массив для хранения созданных документов
    МассивДокументов = Новый Массив;
    
    // Получаем данные студента (включая курс)
    ДанныеСтудента = ПолучитьДанныеСтудента(ЭтотОбъект.Студент);
    
    // Для каждой дисциплины создаем направление на пересдачу
    Для Каждого СтрокаХарактеристика Из ЭтотОбъект.Характеристика Цикл
        // Создаем новый документ НаправлениеНаПересдачу
        НовыйДокумент = Документы.НаправлениеНаПересдачу.СоздатьДокумент();
        
        // Заполняем общие реквизиты
        НовыйДокумент.Дата = ТекущаяДата();
        НовыйДокумент.Студент = ЭтотОбъект.Студент;
        НовыйДокумент.Группа = ЭтотОбъект.Группа;
        НовыйДокумент.Факультет = ЭтотОбъект.Факультет;
        НовыйДокумент.ФормаОбучения = ЭтотОбъект.ФормаОбучения;
        НовыйДокумент.НаправленияПодготовки = ЭтотОбъект.НаправленияПодготовки;
        НовыйДокумент.Курс = ДанныеСтудента.Курс; // Используем курс из данных студента
        НовыйДокумент.ЛичныйИндекс = ЭтотОбъект.ЛичныйИндекс;
        
        // Остальной код без изменений...
    КонецЦикла;
    
    Возврат МассивДокументов;
КонецФункции

&НаКлиенте
Процедура СоздатьНаправленияНаКлиенте(Команда) Экспорт
    // Проверяем, записан ли документ
    Если Модифицированность Тогда
        Вопрос = Новый ОписаниеОповещения("ПослеВопросаОЗаписи", ЭтотОбъект);
        ПоказатьВопрос(Вопрос, "Документ был изменен. Сохранить изменения перед созданием направлений?", РежимДиалогаВопрос.ДаНетОтмена);
    Иначе
        СоздатьИОткрытьНаправления();
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОЗаписи(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
        Записать();
        СоздатьИОткрытьНаправления();
    ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
        СоздатьИОткрытьНаправления();
    КонецЕсли;
КонецПроцедуры            

&НаКлиенте
Процедура СоздатьИОткрытьНаправления() Экспорт
    МассивСсылок = СоздатьНаправленияНаПересдачуНаСервере();
    ОткрытьСозданныеНаправления(МассивСсылок);
КонецПроцедуры

&НаСервере
Функция СоздатьНаправленияНаПересдачуНаСервере() Экспорт
    Возврат СоздатьНаправленияНаПересдачу();
КонецФункции

&НаКлиенте
Процедура ОткрытьСозданныеНаправления(МассивСсылок) Экспорт
    // Открываем все документы в одном списке с отбором
    ПараметрыОтбора = Новый Структура;
    ПараметрыОтбора.Вставить("Ссылка", МассивСсылок);
    ОткрытьФорму("Документ.НаправлениеНаПересдачу.ФормаСписка", ПараметрыОтбора);
    
    Сообщить("Создано " + МассивСсылок.Количество() + " документов НаправлениеНаПересдачу.");
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьСозданныеНаправления(МассивСсылок) Экспорт
    Если МассивСсылок.Количество() > 0 Тогда
        ПараметрыОтбора = Новый Структура;
        ПараметрыОтбора.Вставить("Ссылка", МассивСсылок);
        ОткрытьФорму("Список.НаправлениеНаПересдачу", ПараметрыОтбора);
        Сообщить("Создано " + МассивСсылок.Количество() + " документов НаправлениеНаПересдачу.");
    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
    Результат = Новый Структура;
    
    Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИдентификацияАкадемическихЗадолженностей") Тогда
        // Получаем данные студента (включая курс)
        ДанныеСтудента = ПолучитьДанныеСтудента(ДанныеЗаполнения.Студент);
        
        Если ДанныеСтудента = Неопределено Тогда
            Возврат Результат;
        КонецЕсли;
        
        // Заполняем структуру результата
        Результат.Вставить("Студент", ДанныеЗаполнения.Студент);
        Результат.Вставить("Группа", ДанныеЗаполнения.Группа);
        Результат.Вставить("Факультет", ДанныеЗаполнения.Факультет);
        Результат.Вставить("ФормаОбучения", ДанныеЗаполнения.ФормаОбучения);
        Результат.Вставить("НаправленияПодготовки", ДанныеЗаполнения.НаправленияПодготовки);
        Результат.Вставить("ЛичныйИндекс", ДанныеЗаполнения.ЛичныйИндекс);
        Результат.Вставить("Семестр", ДанныеЗаполнения.Семестр);
        Результат.Вставить("Курс", ДанныеСтудента.Курс); // Используем курс из данных студента
        
        // Остальной код без изменений...
    КонецЕсли;
    
    Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьДанныеСтудента(СсылкаНаСтудента) Экспорт
    Результат = Новый Структура;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.ЛичныйИндекс,
    |    Студенты.Родитель КАК РодительСправочника,
    |    Студенты.Родитель.Наименование КАК НаименованиеРодителя,
    |    Студенты.НаправленияПодготовки,
    |    Студенты.Факультет,
    |    Студенты.Семестр,
    |    Студенты.ФормаОбучения,
    |    Студенты.Наименование
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &СсылкаНаСтудента";

    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();    

    Если Выборка.Следующий() Тогда
        Результат.Вставить("ЛичныйИндекс", Выборка.ЛичныйИндекс);
        
        // Остальные поля...
        Если ЗначениеЗаполнено(Выборка.РодительСправочника) Тогда
            Группа = НайтиГруппуПоНаименованию(Выборка.НаименованиеРодителя);
            Если Не ЗначениеЗаполнено(Группа) Тогда
                Группа = НайтиГруппуПоЧастичномуСовпадению(Выборка.НаименованиеРодителя);
            КонецЕсли;
            
            Результат.Вставить("ГруппаСсылка", Группа);
            Результат.Вставить("ГруппаНаименование", Выборка.НаименованиеРодителя);
        КонецЕсли;
        
        Результат.Вставить("НаименованиеСтудента", Выборка.Наименование);
        Результат.Вставить("НаправленияПодготовки", Выборка.НаправленияПодготовки);
        Результат.Вставить("Факультет", Выборка.Факультет);
        Результат.Вставить("Семестр", Выборка.Семестр);
        Результат.Вставить("ФормаОбучения", Выборка.ФормаОбучения);
    КонецЕсли;
    
    Возврат Результат;
КонецФункции
