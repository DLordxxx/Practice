&НаСервере
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
    
    // Обработка заполнения на основании ведомости
    Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВедомостьОСистемеАкадемическихЗадолженностей") Тогда
        
        // Получаем объект документа-основания
        ДокументОснование = ДанныеЗаполнения.ПолучитьОбъект();
        
        // Заполняем основные реквизиты
        ЭтотОбъект.Студент = ДокументОснование.Студент;
        
        // Получаем данные студента (включая группу и курс)
        ДанныеСтудента = ПолучитьДанныеСтудента(ДокументОснование.Студент);
        
        // Устанавливаем группу студента
        Если ДанныеСтудента.Свойство("ГруппаСсылка") Тогда
            ЭтотОбъект.Группа = ДанныеСтудента.ГруппаСсылка;
        КонецЕсли;
        
        // Устанавливаем курс студента (если нужно)
        Если ДанныеСтудента.Свойство("Курс") Тогда
            ЭтотОбъект.Курс = ДанныеСтудента.Курс;
        КонецЕсли;
              
        // Получаем форму обучения студента
        Если ДанныеСтудента.Свойство("ФормаОбучения") Тогда
            ЭтотОбъект.ФормаОбучения = ДанныеСтудента.ФормаОбучения;
        КонецЕсли;
        
        // Определяем решение комиссии на основании статуса
        Если ДокументОснование.СтатусАкадемическойЗадолженности = Перечисления.НаименованиеСтатуса.Закрытая Тогда
            ЭтотОбъект.Рекомендация = Перечисления.РешениеКомиссии.ЗадолженностьЛиквидирована;
        ИначеЕсли ДокументОснование.СтатусАкадемическойЗадолженности = Перечисления.НаименованиеСтатуса.Активная Тогда
            ЭтотОбъект.Рекомендация = Перечисления.РешениеКомиссии.РекомендоватьОтчисление;
        КонецЕсли;
        
    ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВедомостьОСистемеАкадемическихЗадолженностейДляСтудентовсИОМ") Тогда
        
        // Получаем объект документа-основания
        ДокументОснование = ДанныеЗаполнения.ПолучитьОбъект();
        
        // Заполняем основные реквизиты
        ЭтотОбъект.Студент = ДокументОснование.Студент;
        
        // Получаем данные студента (включая группу и курс)
        ДанныеСтудента = ПолучитьДанныеСтудента(ДокументОснование.Студент);
        
        // Устанавливаем группу студента
        Если ДанныеСтудента.Свойство("ГруппаСсылка") Тогда
            ЭтотОбъект.Группа = ДанныеСтудента.ГруппаСсылка;
        КонецЕсли;
        
        // Устанавливаем курс студента (если нужно)
        Если ДанныеСтудента.Свойство("Курс") Тогда
            ЭтотОбъект.Курс = ДанныеСтудента.Курс;
        КонецЕсли;
            
        // Получаем форму обучения студента
        Если ДанныеСтудента.Свойство("ФормаОбучения") Тогда
            ЭтотОбъект.ФормаОбучения = ДанныеСтудента.ФормаОбучения;
        КонецЕсли;

        // Для студентов с ИОМ всегда отмечаем наличие задолженности
        ЭтотОбъект.НаличиеЗадолженности = Истина;
        ЭтотОбъект.СтатусРекомендации = Перечисления.СтатусыРекомендаций.ТребуетсяРазработка;
        
        // Определяем решение комиссии на основании статуса
        Если ДокументОснование.СтатусАкадемическойЗадолженности = Перечисления.НаименованиеСтатуса.Закрытая Тогда
            ЭтотОбъект.Рекомендация = Перечисления.РешениеКомиссии.ЗадолженностьЛиквидирована;
        ИначеЕсли ДокументОснование.СтатусАкадемическойЗадолженности = Перечисления.НаименованиеСтатуса.Активная Тогда
            ЭтотОбъект.Рекомендация = Перечисления.РешениеКомиссии.РазработатьИндивидуальныйПлан;
        КонецЕсли;
            
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтудента(СсылкаНаСтудента) Экспорт
    Результат = Новый Структура;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	Студенты.Родитель КАК РодительСправочника,
    |	Студенты.Родитель.Наименование КАК НаименованиеРодителя,
    |	Студенты.ФормаОбучения КАК ФормаОбучения,
    |	Студенты.Наименование КАК Наименование
    |ИЗ
    |	Справочник.Студенты КАК Студенты
    |ГДЕ
    |	Студенты.Ссылка = &СсылкаНаСтудента"; 

    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();    

    Если Выборка.Следующий() Тогда
             
        Если ЗначениеЗаполнено(Выборка.РодительСправочника) Тогда
            Группа = НайтиГруппуПоНаименованию(Выборка.НаименованиеРодителя);
            Если Не ЗначениеЗаполнено(Группа) Тогда
                Группа = НайтиГруппуПоЧастичномуСовпадению(Выборка.НаименованиеРодителя);
            КонецЕсли;
            
            Результат.Вставить("ГруппаСсылка", Группа);
            Результат.Вставить("ГруппаНаименование", Выборка.НаименованиеРодителя);
        КонецЕсли;
        
        Результат.Вставить("НаименованиеСтудента", Выборка.Наименование);
		
		Результат.Вставить("ФормаОбучения", Выборка.ФормаОбучения);
    КонецЕсли;
    
    Возврат Результат;
КонецФункции

&НаСервере
Функция НайтиГруппуПоНаименованию(НаименованиеГруппы)
    // Поиск группы по точному совпадению наименования
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Группы.Ссылка КАК Ссылка
    |ИЗ
    |    Справочник.Группы КАК Группы
    |ГДЕ
    |    ВЕРХ(Группы.Наименование) = ВЕРХ(&Наименование)";
    
    Запрос.УстановитьПараметр("Наименование", НаименованиеГруппы);
    
    Попытка
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если Выборка.Следующий() Тогда
            Возврат Выборка.Ссылка;
        КонецЕсли;
    Исключение
        // Логируем ошибку
    КонецПопытки;
    
    Возврат Неопределено;
КонецФункции

&НаСервере
Функция НайтиГруппуПоЧастичномуСовпадению(НаименованиеГруппы)
    // Поиск группы по частичному совпадению наименования
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Группы.Ссылка КАК Ссылка
    |ИЗ
    |    Справочник.Группы КАК Группы
    |ГДЕ
    |    Группы.Наименование ПОДОБНО &Наименование";
    
    Запрос.УстановитьПараметр("Наименование", "%"+НаименованиеГруппы+"%");
    
    Попытка
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если Выборка.Следующий() Тогда
            Возврат Выборка.Ссылка;
        КонецЕсли;
    Исключение
        // Логируем ошибку
    КонецПопытки;
    
    Возврат Неопределено;
КонецФункции