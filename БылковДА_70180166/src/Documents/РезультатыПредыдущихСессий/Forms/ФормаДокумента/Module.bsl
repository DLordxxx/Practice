&НаСервере
Процедура ЗаполнитьТабличнуюЧастьСлучайнымиДаннымиНаСервере()
    
    // Проверяем заполненность факультета
    Если НЕ ЗначениеЗаполнено(Объект.Факультет) Тогда
        ВызватьИсключение "Необходимо сначала указать факультет!";
    КонецЕсли;
    
    ТабличнаяЧасть = Объект.ХарактеристикаСтудента;
    ТабличнаяЧасть.Очистить();
    
    ГСЧ = Новый ГенераторСлучайныхЧисел;
    
    // Получаем имя выбранного факультета для фильтрации
    ИмяФакультета = Объект.Факультет.Наименование;
    
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |    Дисциплины.Ссылка КАК Дисциплина,
    |    Дисциплины.НаименованиеКонтроля КАК НаименованиеКонтроля
    |ИЗ
    |    Справочник.Дисциплины КАК Дисциплины
    |ГДЕ
    |    Дисциплины.Родитель.Наименование = &ИмяФакультета
    |    И НЕ Дисциплины.ЭтоГруппа
    |
    |УПОРЯДОЧИТЬ ПО
    |    Дисциплина";
    
    Запрос.УстановитьПараметр("ИмяФакультета", ИмяФакультета);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если НЕ Выборка.Количество() > 0 Тогда
        ВызватьИсключение "Для выбранного факультета '" + ИмяФакультета + "' не найдено дисциплин!";
    КонецЕсли;
    
    // Собираем все подходящие дисциплины в массив
    МассивДисциплин = Новый Массив;
    Пока Выборка.Следующий() Цикл
        МассивДисциплин.Добавить(Новый Структура("Дисциплина,НаименованиеКонтроля", 
            Выборка.Дисциплина, Выборка.НаименованиеКонтроля));
    КонецЦикла;
    
    // Определяем максимальное количество строк (не больше количества доступных дисциплин)
    МаксКоличествоСтрок = Мин(10, МассивДисциплин.Количество());
    КоличествоСтрок = ГСЧ.СлучайноеЧисло(1, МаксКоличествоСтрок);
    
    // Создаем массив для отслеживания уже использованных дисциплин
    ИспользованныеДисциплины = Новый Массив;
    
    Для Счетчик = 1 По КоличествоСтрок Цикл
        НоваяСтрока = ТабличнаяЧасть.Добавить();
        
        // Выбираем случайную дисциплину из доступных, которая еще не использовалась
        Попыток = 0;
        МаксПопыток = МассивДисциплин.Количество() * 2; // Защита от бесконечного цикла
        НайденаУникальная = Ложь;
        
        Пока НЕ НайденаУникальная И Попыток < МаксПопыток Цикл
            СлучайныйИндекс = ГСЧ.СлучайноеЧисло(0, МассивДисциплин.Количество() - 1);
            ТекущаяДисциплина = МассивДисциплин[СлучайныйИндекс];
            Попыток = Попыток + 1;
            
            Если ИспользованныеДисциплины.Найти(ТекущаяДисциплина.Дисциплина) = Неопределено Тогда
                НайденаУникальная = Истина;
            КонецЕсли;
        КонецЦикла;
        
        Если НЕ НайденаУникальная Тогда
            ВызватьИсключение "Не удалось выбрать уникальные дисциплины";
        КонецЕсли;
        
        // Добавляем дисциплину в список использованных
        ИспользованныеДисциплины.Добавить(ТекущаяДисциплина.Дисциплина);
        
        НоваяСтрока.Дисциплина = ТекущаяДисциплина.Дисциплина;
        
        // Подбор оценки в зависимости от формы контроля
        Если ТекущаяДисциплина.НаименованиеКонтроля = Перечисления.НаименованиеКонтроля.Экзамен Тогда
            ДоступныеОценки = ПолучитьДоступныеОценкиДляЭкзамена();
        ИначеЕсли ТекущаяДисциплина.НаименованиеКонтроля = Перечисления.НаименованиеКонтроля.Зачет Тогда
            ДоступныеОценки = ПолучитьДоступныеОценкиДляЗачета();
        Иначе
            ДоступныеОценки = ПолучитьДоступныеОценки();
        КонецЕсли;
        
        СлучайныйИндексОценки = ГСЧ.СлучайноеЧисло(0, ДоступныеОценки.Количество() - 1);
        НоваяСтрока.Оценка = ДоступныеОценки[СлучайныйИндексОценки];
    КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьДоступныеОценкиДляЭкзамена()
	ДоступныеОценки = Новый Массив;
	
	ДоступныеОценки.Добавить(Перечисления.Оценка.Отлично);
	ДоступныеОценки.Добавить(Перечисления.Оценка.Хорошо);
	ДоступныеОценки.Добавить(Перечисления.Оценка.Удовлетворительно);
	ДоступныеОценки.Добавить(Перечисления.Оценка.Неудовлетворительно);
	
	Возврат ДоступныеОценки;
КонецФункции

&НаСервере
Функция ПолучитьДоступныеОценкиДляЗачета()
	ДоступныеОценки = Новый Массив;
	
	ДоступныеОценки.Добавить(Перечисления.Оценка.Зачет);
	ДоступныеОценки.Добавить(Перечисления.Оценка.Незачет);
	
	Возврат ДоступныеОценки;
КонецФункции

&НаСервере
Функция ПолучитьДоступныеОценки()
	ДоступныеОценки = Новый Массив;
	МетаданныеПеречисления = Метаданные.Перечисления.Оценка;

	Для Каждого ЗначениеПеречисления Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
		ДоступныеОценки.Добавить(Перечисления.Оценка[ЗначениеПеречисления.Имя]);
	КонецЦикла;

	Возврат ДоступныеОценки;
КонецФункции          

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьСлучайнымиДанными(Команда)
	ЗаполнитьТабличнуюЧастьСлучайнымиДаннымиНаСервере();    
КонецПроцедуры        

&НаКлиенте
Процедура СтудентПриИзменении(Элемент)
    Если ЗначениеЗаполнено(Объект.Студент) Тогда
        ФакультетСтудента = ПолучитьФакультетСтудентаНаСервере(Объект.Студент);
        Объект.Факультет = ФакультетСтудента;
    Иначе
        Объект.Факультет = Неопределено;
    КонецЕсли;
КонецПроцедуры     

&НаСервере
Функция ПолучитьФакультетСтудентаНаСервере(СсылкаНаСтудента)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.Факультет КАК Факультет
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &СсылкаНаСтудента";
    
    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.Факультет;
    КонецЕсли;
    
    Возврат Неопределено;
КонецФункции
