&НаСервере
Процедура ЗаполнитьТабличнуюЧастьСлучайнымиДаннымиНаСервере()
    
    Если НЕ ЗначениеЗаполнено(Объект.Факультет) Тогда
        ВызватьИсключение "Необходимо сначала указать факультет!";
	КонецЕсли;    
	
	Если НЕ ЗначениеЗаполнено(Объект.Студент) Тогда
        ВызватьИсключение "Укажите необходимого студента!";
	КонецЕсли;
    
    Если ЗначениеЗаполнено(Объект.Студент) Тогда
        ФакультетСтудента = ПолучитьФакультетСтудентаНаСервере(Объект.Студент);
        Если ФакультетСтудента <> Объект.Факультет Тогда
            ВызватьИсключение "Данные заполняются неправильно!";
		КонецЕсли; 
		
	   	Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |	Студенты.Семестр КАК Семестр,
        |	Студенты.Курс КАК Курс
        |ИЗ
        |	Справочник.Студенты КАК Студенты
        |ГДЕ
        |	Студенты.Ссылка = &СсылкаНаСтудента";
        
        Запрос.УстановитьПараметр("СсылкаНаСтудента", Объект.Студент);
        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
        
        Если Выборка.Следующий() Тогда
				Если Выборка.Курс = 1 И	Выборка.Семестр = Перечисления.Семестры.Первый Тогда
					Объект.ХарактеристикаСтудента.Очистить();
                	ВызватьИсключение("Студент является первокурсником на первом семестре!");
            КонецЕсли;
		КонецЕсли
	КонецЕсли;  
		
    ТабличнаяЧасть = Объект.ХарактеристикаСтудента;
    ТабличнаяЧасть.Очистить();
    
    ГСЧ = Новый ГенераторСлучайныхЧисел;
    
    ИмяФакультета = Объект.Факультет.Наименование;
    
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |    Дисциплины.Ссылка КАК Дисциплина,
    |    Дисциплины.НаименованиеКонтроля КАК НаименованиеКонтроля
    |ИЗ
    |    Справочник.Дисциплины КАК Дисциплины
    |ГДЕ
    |    Дисциплины.Родитель.Наименование = &ИмяФакультета
    |    И НЕ Дисциплины.ЭтоГруппа
    |
    |УПОРЯДОЧИТЬ ПО
    |    Дисциплина";
    
    Запрос.УстановитьПараметр("ИмяФакультета", ИмяФакультета);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если НЕ Выборка.Количество() > 0 Тогда
        ВызватьИсключение "Для выбранного факультета '" + ИмяФакультета + "' не найдено дисциплин!";
    КонецЕсли;
    
    МассивДисциплин = Новый Массив;
    Пока Выборка.Следующий() Цикл
        МассивДисциплин.Добавить(Новый Структура("Дисциплина,НаименованиеКонтроля", 
            Выборка.Дисциплина, Выборка.НаименованиеКонтроля));
    КонецЦикла;
    
    МаксКоличествоСтрок = Мин(10, МассивДисциплин.Количество());
    КоличествоСтрок = ГСЧ.СлучайноеЧисло(1, МаксКоличествоСтрок);
    
    ИспользованныеДисциплины = Новый Массив;
    
    Для Счетчик = 1 По КоличествоСтрок Цикл
        НоваяСтрока = ТабличнаяЧасть.Добавить();
        
        Попыток = 0;
        МаксПопыток = МассивДисциплин.Количество() * 2; 
        НайденаУникальная = Ложь;
        
        Пока НЕ НайденаУникальная И Попыток < МаксПопыток Цикл
            СлучайныйИндекс = ГСЧ.СлучайноеЧисло(0, МассивДисциплин.Количество() - 1);
            ТекущаяДисциплина = МассивДисциплин[СлучайныйИндекс];
            Попыток = Попыток + 1;
            
            Если ИспользованныеДисциплины.Найти(ТекущаяДисциплина.Дисциплина) = Неопределено Тогда
                НайденаУникальная = Истина;
            КонецЕсли;
        КонецЦикла;
        
        Если НЕ НайденаУникальная Тогда
            ВызватьИсключение "Не удалось выбрать уникальные дисциплины";
        КонецЕсли;
        
        ИспользованныеДисциплины.Добавить(ТекущаяДисциплина.Дисциплина);
        
        НоваяСтрока.Дисциплина = ТекущаяДисциплина.Дисциплина;
        
        Если ТекущаяДисциплина.НаименованиеКонтроля = Перечисления.НаименованиеКонтроля.Экзамен Тогда
            ДоступныеОценки = ПолучитьДоступныеОценкиДляЭкзамена();
        ИначеЕсли ТекущаяДисциплина.НаименованиеКонтроля = Перечисления.НаименованиеКонтроля.Зачет Тогда
            ДоступныеОценки = ПолучитьДоступныеОценкиДляЗачета();
        Иначе
            ДоступныеОценки = ПолучитьДоступныеОценки();
        КонецЕсли;
        
        СлучайныйИндексОценки = ГСЧ.СлучайноеЧисло(0, ДоступныеОценки.Количество() - 1);
        НоваяСтрока.Оценка = ДоступныеОценки[СлучайныйИндексОценки];
    КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьДоступныеОценкиДляЭкзамена()
	ДоступныеОценки = Новый Массив;
	
	ДоступныеОценки.Добавить(Перечисления.Оценка.Отлично);
	ДоступныеОценки.Добавить(Перечисления.Оценка.Хорошо);
	ДоступныеОценки.Добавить(Перечисления.Оценка.Удовлетворительно);
	ДоступныеОценки.Добавить(Перечисления.Оценка.Неудовлетворительно);
	
	Возврат ДоступныеОценки;
КонецФункции

&НаСервере
Функция ПолучитьДоступныеОценкиДляЗачета()
	ДоступныеОценки = Новый Массив;
	
	ДоступныеОценки.Добавить(Перечисления.Оценка.Зачет);
	ДоступныеОценки.Добавить(Перечисления.Оценка.Незачет);
	
	Возврат ДоступныеОценки;
КонецФункции

&НаСервере
Функция ПолучитьДоступныеОценки()
	ДоступныеОценки = Новый Массив;
	МетаданныеПеречисления = Метаданные.Перечисления.Оценка;

	Для Каждого ЗначениеПеречисления Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
		ДоступныеОценки.Добавить(Перечисления.Оценка[ЗначениеПеречисления.Имя]);
	КонецЦикла;

	Возврат ДоступныеОценки;
КонецФункции          

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьСлучайнымиДанными(Команда)
	ЗаполнитьТабличнуюЧастьСлучайнымиДаннымиНаСервере();    
КонецПроцедуры        

&НаКлиенте
Процедура СтудентПриИзменении(Элемент)
    Если ЗначениеЗаполнено(Объект.Студент) Тогда
        ФакультетСтудента = ПолучитьФакультетСтудентаНаСервере(Объект.Студент);
        Объект.Факультет = ФакультетСтудента;
    Иначе
        Объект.Факультет = Неопределено;
    КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ФакультетПриИзменении(Элемент)
    // Проверка соответствия при изменении факультета
    Если ЗначениеЗаполнено(Объект.Студент) И ЗначениеЗаполнено(Объект.Факультет) Тогда
        ФакультетСтудента = ПолучитьФакультетСтудентаНаСервере(Объект.Студент);
        Если ФакультетСтудента <> Объект.Факультет Тогда
            ПоказатьПредупреждение(, "Данные заполняются неправильно!");
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры 

&НаСервере
Функция ПолучитьФакультетСтудентаНаСервере(СсылкаНаСтудента)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Студенты.Факультет КАК Факультет
    |ИЗ
    |    Справочник.Студенты КАК Студенты
    |ГДЕ
    |    Студенты.Ссылка = &СсылкаНаСтудента";
    
    Запрос.УстановитьПараметр("СсылкаНаСтудента", СсылкаНаСтудента);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.Факультет;
    КонецЕсли;
    
    Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура СоздатьНаОсновании(Команда)
    СоздатьНаОснованииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьНаОснованииНаСервере()
    
    // Проверка наличия задолженностей
    Если НетАкадемическихЗадолженностей() Тогда
        ВызватьИсключение "Академические задолженности у студента отсутствуют!";
    КонецЕсли;
    
    // Здесь код создания документа на основании
    // ...
    
КонецПроцедуры

&НаСервере
Функция НетАкадемическихЗадолженностей()
        
    Для Каждого СтрокаТабличнойЧасти Из Объект.ХарактеристикаСтудента Цикл
        Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Оценка) Тогда
            Продолжить;
        КонецЕсли;
        
        // Проверяем, является ли оценка задолженностью
        Если СтрокаТабличнойЧасти.Оценка = Перечисления.Оценка.Незачет ИЛИ
           СтрокаТабличнойЧасти.Оценка = Перечисления.Оценка.Неудовлетворительно Тогда
            Возврат Ложь;
        КонецЕсли;
    КонецЦикла;
    
    Возврат Истина;
КонецФункции
